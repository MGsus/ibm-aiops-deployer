
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Install Instana
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

# --------------------------------------------------------------------------------------------------------------------------------------
# Install Instana
# --------------------------------------------------------------------------------------------------------------------------------------

- name: 🛰️  START - INSTALL INSTANA
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Installing INSTANA"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_ibmaiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_ibmaiops_feature.kind}}.log
  ignore_errors: true




# Create aiops-topology-service-account
- name:   🚀 PREREQUISITES - Patch default storage class if non defined
  shell: |
    export default=$(oc get storageclass -oyaml|grep "is-default-class"|wc -l|tr -d " ")
    echo $default
    if [ $default -lt 1 ]; then
        echo "Patching"
        kubectl patch storageclass {{ AIOPS_STORAGE_CLASS_LARGE_BLOCK }} -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
      else
        echo "Patching not needed"
      fi
  ignore_errors: true



- name: 🚀 INSTANA - Set INSTANA Password 
  set_fact: current_admin_pass={{current_ibmaiops_feature.instana_admin_pass  | default( global_config.global_password )}}


- name: 🟣  INSTANA -  INSTANA Password {{current_admin_pass}}
  debug:
    var: current_admin_pass
    verbosity: 1



# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# Install Cert Manager if needed
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 INSTANA - Check cert-manager
  shell: |
    CERT_MANAGER_CRD=$(oc get pods -A|grep "cert-manager"|grep "1/1"|wc -l|tr -d ' ') 
    echo $CERT_MANAGER_CRD
  ignore_errors: true
  register: cert_check


- name: 🚀 INSTANA - Install cert-manager {{cert_check.stdout}}
  shell: |
    oc apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.0/cert-manager.yaml
    sleep 15
    oc create clusterrolebinding instana-cert-manager-admin --clusterrole=cluster-admin --serviceaccount=cert-manager:cert-manager
    oc create clusterrolebinding instana-cert-manager-cainjector-admin --clusterrole=cluster-admin --serviceaccount=cert-manager:cert-manager-cainjector
    oc create clusterrolebinding instana-cert-manager-webhook-admin --clusterrole=cluster-admin --serviceaccount=cert-manager:cert-manager-webhook
  when: cert_check.stdout == "0"
  ignore_errors: true


- name:   🕦 INSTANA - Wait for CertManager to become ready
  shell: oc -n cert-manager get pod | grep cert-manager-webhook
  register: kubectl_get_pods
  until: '"1/1" in kubectl_get_pods.stdout'
  retries: 500
  delay: 15
  when: cert_check.stdout == "0"



# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# Create DataStores
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - Instana Datastore Operators'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  



# Create aiops-topology-service-account
- name:   🚀 INSTANA - Create Backend Datastore Namespace
  shell: |
    oc create ns instana-datastores
    oc -n instana-datastores create secret docker-registry instana-registry \
    --docker-username=_ \
    --docker-password={{current_agent_key}} \
    --docker-server=artifact-public.instana.io   
  ignore_errors: true

- name: 🚀 INSTANA - Create Backend Datastore Operator Install Helm
  shell: |
    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    chmod 700 get_helm.sh
    ./get_helm.sh
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1




- name: 🚀 INSTANA - Create Backend Datastore Operator Zookeeper
  shell: |
    # Zookeeper Operator installation
    helm repo add pravega https://charts.pravega.io
    helm repo update
    #helm install instana -n instana-datastores  pravega/zookeeper-operator --version=0.2.15
    helm install instana -n instana-datastores  pravega/zookeeper-operator --version=0.2.15 --set image.repository=artifact-public.instana.io/self-hosted-images/3rd-party/zookeeper-operator --set image.tag=0.2.15_v0.2.0 --set global.imagePullSecrets={"instana-registry"}
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1



- name: 🚀 INSTANA - Create Backend Datastore Operator Strimzi
  shell: |
    # Strimzi Operator installation
    helm repo add strimzi https://strimzi.io/charts/
    helm repo update
    #helm install strimzi strimzi/strimzi-kafka-operator --version 0.36.0 -n instana-datastores
    helm install strimzi strimzi/strimzi-kafka-operator --version 0.38.0 -n instana-datastores --set image.registry=artifact-public.instana.io --set image.repository=self-hosted-images/3rd-party/strimzi --set image.name=operator --set image.tag=0.38.0_v0.3.0 --set image.imagePullSecrets[0].name="instana-registry" --set kafka.image.registry=artifact-public.instana.io --set kafka.image.repository=self-hosted-images/3rd-party/strimzi --set kafka.image.name=kafka --set kafka.image.tag=3.6.0_v0.3.0
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1



- name: 🚀 INSTANA - Create Backend Datastore Operator Elasticsearch
  shell: |
    # Elasticsearch (ECK) Operator installation
    helm repo add elastic https://helm.elastic.co
    helm repo update
    #helm install elastic-operator elastic/eck-operator -n instana-datastores --version=2.8.0
    helm install elastic-operator elastic/eck-operator -n instana-datastores --version=2.9.0 --set image.repository=artifact-public.instana.io/self-hosted-images/3rd-party/elasticsearch-operator --set image.tag=2.9.0_v0.3.0 --set imagePullSecrets[0].name="instana-registry"
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1


- name: 🚀 INSTANA - Create Backend Datastore Operator Postgres SCC
  kubernetes.core.k8s:
    namespace: instana-datastores
    state: present
    template: ./templates/instana-datastores/cassandra-scc.yaml



- name: 🚀 INSTANA - Create Backend Datastore Operator Postgres
  shell: |
    # Postgres operator installation
    helm repo add postgres https://opensource.zalando.com/postgres-operator/charts/postgres-operator
    helm repo update
    helm install postgres-operator postgres/postgres-operator  --version=1.10.0 --set configGeneral.kubernetes_use_configmaps=true --set securityContext.runAsUser=1000860000 --namespace=instana-datastores
    #helm install cnpg cnpg/cloudnative-pg --set image.repository=artifact-public.instana.io/self-hosted-images/3rd-party/cloudnative-pg-operator --set image.tag=1.21.1_v0.1.0 --version=0.20.0 --set imagePullSecrets[0].name=instana-registry --set containerSecurityContext.runAsUser=<UID from namespace> --set containerSecurityContext.runAsGroup=<UID from namespace> -n instana-postgres
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1


- name: 🚀 INSTANA - Create Backend Datastore Operator Beeinstana
  shell: |
    # Beeinstana operator installation
    helm repo add instana https://helm.instana.io/artifactory/rel-helm-customer-virtual --username _ --password {{current_agent_key}}
    helm repo update
    helm install beeinstana instana/beeinstana-operator --namespace=instana-datastores --set operator.securityContext.seccompProfile.type=RuntimeDefault
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1





# - name: 🚀 INSTANA - Create Backend Datastore Operator Cassandra
#   kubernetes.core.k8s:
#     namespace: instana-datastores
#     state: present
#     template: ./templates/instana-datastores/cassandra-operator.yaml
- name: 🚀 INSTANA - Create Cassandra Password Secret
  kubernetes.core.k8s:
    namespace: instana-datastores
    state: present
    template: ./templates/instana-datastores/cassandra-superuser.yaml

- name: 🚀 INSTANA - Create Cassandra Roles
  kubernetes.core.k8s:
    namespace: instana-datastores
    state: present
    template: ./templates/instana-datastores/cassandra-scc.yaml


- name: 🚀 INSTANA - Create Backend Datastore Operator Cassandra
  shell: |
    # kubectl apply -f ./templates/instana-datastores/cassandra-superuser.yaml
    kubectl apply -f ./templates/instana-datastores/cassandra-scc.yaml
    helm repo add k8ssandra https://helm.k8ssandra.io/stable
    helm repo update
    #helm install cass-operator k8ssandra/cass-operator -n instana-datastores --create-namespace --version=0.42.0 --set securityContext.runAsGroup=999 --set securityContext.runAsUser=999
    helm install cass-operator k8ssandra/cass-operator -n instana-datastores --version=0.45.2 --set securityContext.runAsGroup=999 --set securityContext.runAsUser=999 --set image.registry=artifact-public.instana.io --set image.repository=self-hosted-images/3rd-party/cass-operator --set image.tag=1.18.2_v0.1.0 --set imagePullSecrets[0].name=instana-registry --set appVersion=1.18.2 --set imageConfig.systemLogger=artifact-public.instana.io/self-hosted-images/3rd-party/system-logger:1.18.2_v0.1.0  --set imageConfig.k8ssandraClient=artifact-public.instana.io/self-hosted-images/3rd-party/k8ssandra-k8ssandra-client:0.2.2_v0.1.0
    # Security Context Constraints, needed if you are running on RedHat OpenShift
    # kubectl apply -f ./templates/instana-datastores/cassandra-scc.yaml
    # kubectl apply -f ./templates/instana-datastores/cassandra-crb.yaml
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1


- name: 🚀 INSTANA - Create Backend Datastore Roles
  kubernetes.core.k8s:
    namespace: instana-datastores
    state: present
    template: ./templates/instana-datastores/roles.yaml
    



- name: 🚀 INSTANA - Create Backend Datastore Operator Clickhouse 
  shell: |
    # Clickhouse Operator installation
    kubectl apply -f ./templates/instana-datastores/clickhouse-scc.yaml
    helm repo add clickhouse-operator https://docs.altinity.com/clickhouse-operator/
    helm repo update
    #helm install clickhouse-operator clickhouse-operator/altinity-clickhouse-operator -n instana-datastores --version=0.21.3
    helm install clickhouse-operator instana/ibm-clickhouse-operator -n instana-datastores --version=v0.1.2 --set operator.image.repository=artifact-public.instana.io/clickhouse-operator --set operator.image.tag=v0.1.2 --set imagePullSecrets[0].name="instana-registry"

    #curl --silent https://raw.githubusercontent.com/Altinity/clickhouse-operator/0.22.0/deploy/operator/clickhouse-operator-install-bundle.yaml | sed 's|kube-system|instana-datastores|g' | kubectl apply --filename -
    # Image pull secrets for Clickhouse image
    kubectl create secret docker-registry clickhouse-image-secret \
      --namespace=instana-datastores \
      --docker-username=_ \
      --docker-password={{current_agent_key}} \
      --docker-server=artifact-public.instana.io
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1



- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - 🕦 Wait for DataStore Operators to become ready (about 5-10 minutes) - Started at $(date +%H:%M) UTC'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  



- name:   🕦 INSTANA - Wait for DataStores Operators to become ready
  shell: |
    while [ `oc -n instana-datastores get pods| grep -v '1/1' | grep -v '2/2' | grep -v '3/3' | grep -c ""` -gt 1 ]
    do
      sleep 30
    done
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1



# - name:   🕦 INSTANA - Wait for Cassandra Operator to become ready
#   shell: |
#     while [ `oc -n instana-datastores get csv|grep DataStax|grep Succeeded| grep -c ""` -lt 1 ]
#     do
#       sleep 30
#     done
#   ignore_errors: true
#   register: output
#   args:
#     executable: /bin/bash
# - name: 🟣  OUTPUT
#   debug:
#     var: output.stdout_lines
#     verbosity: 1




- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - Instana Datastores'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  


- name: 🚀 INSTANA - Create Backend Datastore cassandra
  kubernetes.core.k8s:
    namespace: instana-datastores
    state: present
    template: ./templates/instana-datastores/cassandra-instance.j2
    

- name: 🚀 INSTANA - Create Backend Datastore clickhouse
  kubernetes.core.k8s:
    namespace: instana-datastores
    state: present
    template: ./templates/instana-datastores/clickhouse-instance.j2
    

- name: 🚀 INSTANA - Create Backend Datastore elasticsearch
  kubernetes.core.k8s:
    namespace: instana-datastores
    state: present
    template: ./templates/instana-datastores/elasticsearch-instance.j2
    

- name: 🚀 INSTANA - Create Backend Datastore kafka
  kubernetes.core.k8s:
    namespace: instana-datastores
    state: present
    template: ./templates/instana-datastores/kafka-instance.j2
    

- name: 🚀 INSTANA - Create Backend Datastore postgres
  kubernetes.core.k8s:
    namespace: instana-datastores
    state: present
    template: ./templates/instana-datastores/postgres-instance.j2
    

- name: 🚀 INSTANA - Create Backend Datastore zookeeper
  kubernetes.core.k8s:
    namespace: instana-datastores
    state: present
    template: ./templates/instana-datastores/zookeeper-instance.j2
    

- name: 🚀 INSTANA - Create Backend Datastore Beeinstana
  kubernetes.core.k8s:
    namespace: instana-datastores
    state: present
    template: ./templates/instana-datastores/beeinstana-instance.j2
    


# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for DataStores being ready
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - 🕦 Wait for DataStores to become ready (about 5-10 minutes) - Started at $(date +%H:%M) UTC'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  




- name:   🕦 INSTANA - Wait for at least 20 DataStore Pods
  shell: |
    while [ `oc -n instana-datastores get pods| grep -c ""` -lt 20 ]
    do
      sleep 30
    done
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1




- name:   🕦 INSTANA - Wait for all DataStores to become ready
  shell: |
    while [ `oc -n instana-datastores get pods| grep -v '1/1' | grep -v '2/2' | grep -v '3/3' | grep -c ""` -gt 1 ]
    do
      sleep 30
    done
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1




- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - Cert Manager (optional)'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  



