
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Install IBM Concert
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

# --------------------------------------------------------------------------------------------------------------------------------------
# Install IBM Concert
# --------------------------------------------------------------------------------------------------------------------------------------

- name: 🛰️  START - INSTALL IBM Concert
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Installing IBM Concert"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_feature.kind}}.log
  ignore_errors: true





- name: 🚀 IBM Concert - Set IBM Concert Password 
  set_fact: current_admin_pass={{global_config.global_password}}


- name: 🟣  IBM Concert -  IBM Concert Password {{current_admin_pass}}
  debug:
    var: current_admin_pass
    verbosity: 1






# --------------------------------------------------------------------------------------------------------------------------------------
# Getting Installation source from GitHub
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_feature.kind}} - IBM Concert Getting Installation source from GitHub'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  





- name:   🚀 IBM Concert - Getting Installation source from GitHub
  shell: |
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Getting Installation source from GitHub"
    echo "------------------------------------------------------------------------------------------------------------------------------"
    mkdir -p /tmp/concert
    cd  /tmp/concert/

    mkdir ibm-concert
    cd ibm-concert
    wget https://raw.githubusercontent.com/IBM/Concert/main/Software/manage/ibm-concert-manage.sh
    chmod +x ibm-concert-manage.sh
  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    #verbosity: 1






# --------------------------------------------------------------------------------------------------------------------------------------
# Prepare Installation
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_feature.kind}} - IBM Concert Prepare Installation'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  



- name:   🚀 IBM Concert - VARIABLES
  shell: |
    cd  /tmp/concert/ibm-concert
    echo ""
    echo ""
    echo ""
    echo ""
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Variables"
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo "export PROD_REGISTRY={{current_feature.prod_registry}}"
    echo "export PROD_USER={{current_feature.prod_user}}"
    echo "export PRIVATE_REGISTRY_LOCATION={{current_feature.private_registry_location}}"
    echo "export DOCKER_EXE=podman"
    echo "export WORK_DIR=$(pwd)"
    echo "export PROJECT_OPERATOR={{current_feature.project_operator}} "
    echo "export PROJECT_INSTANCE={{current_feature.project_instance}}"
    echo "export STG_CLASS_BLOCK={{ STORAGE_CLASS_FILE }}"
    echo "export STG_CLASS_FILE={{ STORAGE_CLASS_LARGE_BLOCK }}"

    echo ""
    echo ""
    echo ""
    echo ""
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Create Pull Secrets"
    echo "------------------------------------------------------------------------------------------------------------------------------"
  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    #verbosity: 1



- name:   🚀 IBM Concert - Prepare Installation
  shell: |
    cd  /tmp/concert/ibm-concert
    echo ""
    echo ""
    echo ""
    echo ""
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Set Variables"
    echo "------------------------------------------------------------------------------------------------------------------------------"
    export PROD_REGISTRY={{current_feature.prod_registry}}
    export PROD_USER={{current_feature.prod_user}}
    export PRIVATE_REGISTRY_LOCATION={{current_feature.private_registry_location}}
    export DOCKER_EXE=podman 
    export WORK_DIR=$(pwd)
    export PROJECT_OPERATOR={{current_feature.project_operator}} 
    export PROJECT_INSTANCE={{current_feature.project_instance}}
    export STG_CLASS_BLOCK={{ STORAGE_CLASS_FILE }}
    export STG_CLASS_FILE={{ STORAGE_CLASS_LARGE_BLOCK }}

    echo ""
    echo ""
    echo ""
    echo ""
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Create Pull Secrets"
    echo "------------------------------------------------------------------------------------------------------------------------------"
    oc create secret docker-registry mysercret \
        --docker-server=${PROD_REGISTRY} \
        --docker-username=${PROD_USER} \
        --docker-password=${IBM_ENTITLEMENT_KEY} \
        --dry-run=client \
        --output="jsonpath={.data.\.dockerconfigjson}" | base64 --decode > myregistryconfigjson

    oc get secret pull-secret -n openshift-config \
      --output="jsonpath={.data.\.dockerconfigjson}" | base64 \
      --decode > dockerconfigjson

    jq -s '.[0] * .[1]' dockerconfigjson myregistryconfigjson > dockerconfigjson-merged

    oc set data secret/pull-secret -n openshift-config --from-file=.dockerconfigjson=dockerconfigjson-merged
    oc get secret pull-secret -n openshift-config \
      --output="jsonpath={.data.\.dockerconfigjson}" | base64 \
      --decode


    oc create secret docker-registry 'ibm-entitlement-key' --docker-server=${PROD_REGISTRY} --docker-username=${PROD_USER} --docker-password=${IBM_ENTITLEMENT_KEY} --namespace=openshift-marketplace
    oc create secret docker-registry 'ibm-entitlement-key' --docker-server=${PROD_REGISTRY} --docker-username=${PROD_USER} --docker-password=${IBM_ENTITLEMENT_KEY} --namespace=openshift-operators
    oc create secret docker-registry 'ibm-entitlement-key' --docker-server=${PROD_REGISTRY} --docker-username=${PROD_USER} --docker-password=${IBM_ENTITLEMENT_KEY} --namespace=openshift-marketplace
    oc create secret docker-registry 'ibm-entitlement-key' --docker-server=${PROD_REGISTRY} --docker-username=${PROD_USER} --docker-password=${IBM_ENTITLEMENT_KEY} --namespace=openshift-operators
    oc patch -n openshift-marketplace serviceaccount ibm-aiops-catalog -p '{"imagePullSecrets": [{"name": "ibm-entitlement-key"}]}'
    oc patch -n openshift-marketplace serviceaccount ibm-aiops-catalog -p '{"imagePullSecrets": [{"name": "ibm-entitlement-key"}]}'
    oc patch -n openshift-marketplace serviceaccount default -p '{"imagePullSecrets": [{"name": "ibm-entitlement-key"}]}'


    cat << EOF | oc apply -f -
    apiVersion: operators.coreos.com/v1alpha1
    kind: CatalogSource
    metadata:
      name: ibm-aiops-catalog
      namespace: openshift-marketplace
    spec:
      displayName: ibm-aiops-catalog
      publisher: IBM Content
      sourceType: grpc
      image: icr.io/cpopen/ibm-operator-catalog:latest
    EOF

    echo ""
    echo ""
    echo ""
    echo ""
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Initialize Concert Installer"
    echo "------------------------------------------------------------------------------------------------------------------------------"
    ./ibm-concert-manage.sh initialize




    echo ""
    echo ""
    echo ""
    echo ""
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Login for Concert Installer"
    echo "------------------------------------------------------------------------------------------------------------------------------"
    export OCP_URL=https://api.66d97927684f19a4a8b06c46.ocp.techzone.ibm.com:6443
    export OCP_TOKEN="sha256~AYZbHEPMwvzeqBTPMTa9zyZuFydJagZUbTTMpFno1QI"

    export OCP_URL=$(oc get Infrastructure cluster -o jsonpath={.status.apiServerURL})
    export OCP_TOKEN=$(oc create token -n ibm-installer ibm-installer-admin --duration=999999999s)
    #export OCP_TOKEN=$(oc -n openshift-authentication get secret $(oc get secret -n openshift-authentication |grep -m1 oauth-openshift-token|awk '{print$1}') -o jsonpath='{.data.token}'|base64 --decode)
    echo "            🌏 URL:               $OCP_URL"
    echo "            🔐 Token:             $OCP_TOKEN"
    echo ""
    echo "            🧑 Login:   oc login --token=$OCP_TOKEN --server=$OCP_URL"
    echo ""

    ./ibm-concert-manage.sh login-to-ocp --token=${OCP_TOKEN} --server=${OCP_URL}



  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    #verbosity: 1



- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_feature.kind}} - 🕦 Wait for IBM Concert to become ready (about 60-80 minutes) - Started at $(date +%H:%M) UTC'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  



- name:   🚀 IBM Concert -  Installation
  shell: |
    cd  /tmp/concert/ibm-concert
    echo ""
    echo ""
    echo ""
    echo ""
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Set Variables"
    echo "------------------------------------------------------------------------------------------------------------------------------"
    export PROD_REGISTRY={{current_feature.prod_registry}}
    export PROD_USER={{current_feature.prod_user}}
    export PRIVATE_REGISTRY_LOCATION={{current_feature.private_registry_location}}
    export DOCKER_EXE=podman 
    export WORK_DIR=$(pwd)
    export PROJECT_OPERATOR={{current_feature.project_operator}} 
    export PROJECT_INSTANCE={{current_feature.project_instance}}
    export STG_CLASS_BLOCK={{ STORAGE_CLASS_FILE }}
    export STG_CLASS_FILE={{ STORAGE_CLASS_LARGE_BLOCK }}


    echo ""
    echo ""
    echo ""
    echo ""
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Start Concert Installation"
    echo "------------------------------------------------------------------------------------------------------------------------------"
    ./ibm-concert-manage.sh concert-setup



  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    #verbosity: 1



- name: 🕦 CHECK -  Wait for all Pods in {{ current_ibm_feature.project }} to become ready (this might take some time)
  shell: oc get pods -n ibm-concert -l app.kubernetes.io/name=ibm-concert|grep "Running"|grep "1/1"|wc -l| tr -d ' '
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout|int > 17
  retries: 500
  delay: 15




- name:   🚀 IBM Concert -  Finalize
  shell: |
    cd  /tmp/concert/ibm-concert
    echo ""
    echo ""
    echo ""
    echo ""
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " 🚀 Set Variables"
    echo "------------------------------------------------------------------------------------------------------------------------------"
    export PROD_REGISTRY={{current_feature.prod_registry}}
    export PROD_USER={{current_feature.prod_user}}
    export PRIVATE_REGISTRY_LOCATION={{current_feature.private_registry_location}}
    export DOCKER_EXE=podman 
    export WORK_DIR=$(pwd)
    export PROJECT_OPERATOR={{current_feature.project_operator}} 
    export PROJECT_INSTANCE={{current_feature.project_instance}}
    export STG_CLASS_BLOCK={{ STORAGE_CLASS_FILE }}
    export STG_CLASS_FILE={{ STORAGE_CLASS_LARGE_BLOCK }}


    echo ""
    echo ""
    echo ""
    echo ""
    echo "------------------------------------------------------------------------------------------------------------------------------"
    echo " ✅ LOGINS"
    echo "------------------------------------------------------------------------------------------------------------------------------"
    ./ibm-concert-manage.sh get-concert-instance-details

    export OCP_URL=$(oc get Infrastructure cluster -o jsonpath={.status.apiServerURL})
    export OCP_TOKEN=$(oc create token -n ibm-installer ibm-installer-admin --duration=999999999s)
    #export OCP_TOKEN=$(oc -n openshift-authentication get secret $(oc get secret -n openshift-authentication |grep -m1 oauth-openshift-token|awk '{print$1}') -o jsonpath='{.data.token}'|base64 --decode)
    echo "            🌏 URL:               $OCP_URL"
    echo "            🫅 User:              kubeadmin"
    echo "            🔐 Token:             $OCP_TOKEN"




  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash

- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    #verbosity: 1



