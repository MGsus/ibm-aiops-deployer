
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Install IBM Concert
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

# --------------------------------------------------------------------------------------------------------------------------------------
# Install IBM Concert
# --------------------------------------------------------------------------------------------------------------------------------------

- name: 🛰️  START - INSTALL IBM Concert
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Installing IBM Concert"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_ibmaiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_ibmaiops_feature.kind}}.log
  ignore_errors: true




# Create aiops-topology-service-account
- name:   🚀 PREREQUISITES - Patch default storage class if non defined
  shell: |
    export default=$(oc get storageclass -oyaml|grep "is-default-class"|wc -l|tr -d " ")
    echo $default
    if [ $default -lt 1 ]; then
        echo "Patching"
        kubectl patch storageclass {{ AIOPS_STORAGE_CLASS_LARGE_BLOCK }} -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
      else
        echo "Patching not needed"
      fi
  ignore_errors: true



- name: 🚀 IBM Concert - Set IBM Concert Password 
  set_fact: current_admin_pass={{current_ibmaiops_feature.IBM Concert_admin_pass  | default( global_config.global_password )}}


- name: 🟣  IBM Concert -  IBM Concert Password {{current_admin_pass}}
  debug:
    var: current_admin_pass
    verbosity: 1



# --------------------------------------------------------------------------------------------------------------------------------------
# Install Cert Manager if needed
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 IBM Concert - Check cert-manager
  shell: |
    CERT_MANAGER_CRD=$(oc get pods -A|grep "cert-manager"|grep "1/1"|wc -l|tr -d ' ') 
    echo $CERT_MANAGER_CRD
  ignore_errors: true
  register: cert_check


- name: 🚀 IBM Concert - Install cert-manager {{cert_check.stdout}}
  shell: |
    oc apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.0/cert-manager.yaml
    sleep 15
    oc create clusterrolebinding IBM Concert-cert-manager-admin --clusterrole=cluster-admin --serviceaccount=cert-manager:cert-manager
    oc create clusterrolebinding IBM Concert-cert-manager-cainjector-admin --clusterrole=cluster-admin --serviceaccount=cert-manager:cert-manager-cainjector
    oc create clusterrolebinding IBM Concert-cert-manager-webhook-admin --clusterrole=cluster-admin --serviceaccount=cert-manager:cert-manager-webhook
  when: cert_check.stdout == "0"
  ignore_errors: true


- name:   🕦 IBM Concert - Wait for CertManager to become ready
  shell: oc -n cert-manager get pod | grep cert-manager-webhook
  register: kubectl_get_pods
  until: '"1/1" in kubectl_get_pods.stdout'
  retries: 500
  delay: 15
  when: cert_check.stdout == "0"



# --------------------------------------------------------------------------------------------------------------------------------------
# Create DataStores
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - IBM Concert Datastore Operators'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  



# Create aiops-topology-service-account
- name:   🚀 IBM Concert - Create Backend Datastore Namespace
  shell: |
    oc create ns IBM Concert-datastores
    oc -n IBM Concert-datastores create secret docker-registry IBM Concert-registry \
    --docker-username=_ \
    --docker-password={{current_agent_key}} \
    --docker-server=artifact-public.IBM Concert.io   
  ignore_errors: true

- name: 🚀 IBM Concert - Create Backend Datastore Operator Install Helm
  shell: |
    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    chmod 700 get_helm.sh
    ./get_helm.sh
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1


- name: 🚀 IBM Concert - Create Backend Datastore Prepare Helm Charts
  shell: |
    # Zookeeper Operator installation
    helm repo add IBM Concert https://artifact-public.IBM Concert.io/artifactory/rel-helm-customer-virtual --username=_ --password={{current_agent_key}}
    helm repo update  ignore_errors: true
    helm pull IBM Concert/ibm-clickhouse-operator --version=v0.1.2
    helm pull IBM Concert/zookeeper-operator --version=0.2.15
    helm pull IBM Concert/strimzi-kafka-operator --version=0.41.0
    helm pull IBM Concert/eck-operator --version=2.9.0
    helm pull IBM Concert/cloudnative-pg --version=0.20.0
    helm pull IBM Concert/postgres-operator --version=1.10.1
    helm pull IBM Concert/cass-operator --version=0.45.2
    helm pull IBM Concert/cert-manager --version=1.13.2
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1




- name: 🚀 IBM Concert - Create Backend Datastore  SCC
  kubernetes.core.k8s:
    namespace: IBM Concert-datastores
    state: present
    template: ./templates/IBM Concert-datastores/scc.yaml



- name: 🚀 IBM Concert - Create Backend Datastore Operator CASSANDRA
  shell: |
    helm install cass-operator IBM Concert/cass-operator -n IBM Concert-datastores --version=0.45.2 --set securityContext.runAsGroup=999 --set securityContext.runAsUser=999 --set image.registry=artifact-public.IBM Concert.io --set image.repository=self-hosted-images/3rd-party/operator/cass-operator --set image.tag=1.18.2_v0.12.0 --set imagePullSecrets[0].name=IBM Concert-registry --set appVersion=1.18.2 --set imageConfig.systemLogger=artifact-public.IBM Concert.io/self-hosted-images/3rd-party/datastore/system-logger:1.18.2_v0.3.0 --set imageConfig.k8ssandraClient=artifact-public.IBM Concert.io/self-hosted-images/3rd-party/datastore/k8ssandra-client:0.2.2_v0.3.0
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1


- name: 🚀 IBM Concert - Create Backend Datastore Operator CLICKHOUSE
  shell: |
    helm install clickhouse-operator IBM Concert/ibm-clickhouse-operator -n IBM Concert-datastores --version=v0.1.2 --set operator.image.repository=artifact-public.IBM Concert.io/clickhouse-operator --set operator.image.tag=v0.1.2 --set imagePullSecrets[0].name="IBM Concert-registry"
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1


- name: 🚀 IBM Concert - Create Backend Datastore Operator ELASTICSEARCH
  shell: |
    helm install elastic-operator IBM Concert/eck-operator -n IBM Concert-datastores --version=2.9.0 --set image.repository=artifact-public.IBM Concert.io/self-hosted-images/3rd-party/operator/elasticsearch --set image.tag=2.9.0_v0.11.0 --set imagePullSecrets[0].name="IBM Concert-registry"
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1

    
    
- name: 🚀 IBM Concert - Create Backend Datastore Operator KAFKA
  shell: |
    helm install strimzi-kafka-operator IBM Concert/strimzi-kafka-operator --version 0.41.0 -n IBM Concert-datastores --set image.registry=artifact-public.IBM Concert.io --set image.repository=self-hosted-images/3rd-party/operator --set image.name=strimzi --set image.tag=0.41.0_v0.9.0 --set image.imagePullSecrets[0].name="IBM Concert-registry" --set kafka.image.registry=artifact-public.IBM Concert.io --set kafka.image.repository=self-hosted-images/3rd-party/datastore --set kafka.image.name=kafka --set kafka.image.tag=0.41.0-kafka-3.6.2_v0.8.0
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1



    
- name: 🚀 IBM Concert - Create Backend Datastore Operator ZOOKEEPER
  shell: |
    helm install zookeeper-operator -n IBM Concert-datastores IBM Concert/zookeeper-operator --create-namespace --version=0.2.15 --set image.repository=artifact-public.IBM Concert.io/self-hosted-images/3rd-party/operator/zookeeper --set image.tag=0.2.15_v0.11.0 --set global.imagePullSecrets={"IBM Concert-registry"}
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1






- name: 🚀 IBM Concert - Create Backend Datastore Operator Postgres
  shell: |
    # Postgres operator installation
    export uidrange=$(oc get project IBM Concert-datastores -o jsonpath="{.metadata.annotations.openshift\.io/sa\.scc\.uid-range}"|cut -d "/" -f 1)
    helm install cnpg IBM Concert/cloudnative-pg --set image.repository=artifact-public.IBM Concert.io/self-hosted-images/3rd-party/operator/cloudnative-pg --set image.tag=v1.21.1_v0.5.0 --version=0.20.0 --set imagePullSecrets[0].name=IBM Concert-registry --set containerSecurityContext.runAsUser=$uidrange --set containerSecurityContext.runAsGroup=$uidrange -n IBM Concert-datastores
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1


- name: 🚀 IBM Concert - Create Backend Datastore Operator BeeIBM Concert
  shell: |
    # BeeIBM Concert operator installation
    helm repo update
    # HACK!!!!
    helm install beeIBM Concert IBM Concert/beeIBM Concert-operator --namespace=IBM Concert-datastores --set operator.securityContext.seccompProfile.type=RuntimeDefault
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1





- name: 🚀 IBM Concert - Create Backend Datastore Roles
  kubernetes.core.k8s:
    namespace: IBM Concert-datastores
    state: present
    template: ./templates/IBM Concert-datastores/roles.yaml
    



- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - 🕦 Wait for DataStore Operators to become ready (about 5-10 minutes) - Started at $(date +%H:%M) UTC'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  



- name:   🕦 IBM Concert - Wait for DataStores Operators to become ready
  shell: |
    while [ `oc -n IBM Concert-datastores get pods| grep -v '1/1' | grep -v '2/2' | grep -v '3/3' | grep -c ""` -gt 1 ]
    do
      sleep 30
    done
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1



# - name:   🕦 IBM Concert - Wait for Cassandra Operator to become ready
#   shell: |
#     while [ `oc -n IBM Concert-datastores get csv|grep DataStax|grep Succeeded| grep -c ""` -lt 1 ]
#     do
#       sleep 30
#     done
#   ignore_errors: true
#   register: output
#   args:
#     executable: /bin/bash
# - name: 🟣  OUTPUT
#   debug:
#     var: output.stdout_lines
#     verbosity: 1




- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - IBM Concert Datastores'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  


- name: 🚀 IBM Concert - Create Backend Datastore cassandra
  kubernetes.core.k8s:
    namespace: IBM Concert-datastores
    state: present
    template: ./templates/IBM Concert-datastores/cassandra-instance.j2
    

- name: 🚀 IBM Concert - Create Backend Datastore clickhouse
  kubernetes.core.k8s:
    namespace: IBM Concert-datastores
    state: present
    template: ./templates/IBM Concert-datastores/clickhouse-instance.j2
    

- name: 🚀 IBM Concert - Create Backend Datastore elasticsearch
  kubernetes.core.k8s:
    namespace: IBM Concert-datastores
    state: present
    template: ./templates/IBM Concert-datastores/elasticsearch-instance.j2
    

- name: 🚀 IBM Concert - Create Backend Datastore kafka
  kubernetes.core.k8s:
    namespace: IBM Concert-datastores
    state: present
    template: ./templates/IBM Concert-datastores/kafka-instance.j2
    

- name: 🚀 IBM Concert - Create Backend Datastore postgres
  kubernetes.core.k8s:
    namespace: IBM Concert-datastores
    state: present
    template: ./templates/IBM Concert-datastores/postgres-instance.j2
    

    

- name: 🚀 IBM Concert - Create Backend Datastore BeeIBM Concert
  kubernetes.core.k8s:
    namespace: IBM Concert-datastores
    state: present
    template: ./templates/IBM Concert-datastores/beeIBM Concert-instance.j2
    



- name: 🚀 IBM Concert - Create Backend Datastore zookeeper
  kubernetes.core.k8s:
    namespace: IBM Concert-datastores
    state: present
    template: ./templates/IBM Concert-datastores/zookeeper-instance.j2




# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for DataStores being ready
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - 🕦 Wait for DataStores to become ready (about 5-10 minutes) - Started at $(date +%H:%M) UTC'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  




- name:   🕦 IBM Concert - Wait for at least 20 DataStore Pods
  shell: |
    while [ `oc -n IBM Concert-datastores get pods| grep -c ""` -lt 20 ]
    do
      sleep 30
    done
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1




- name:   🕦 IBM Concert - Wait for all DataStores to become ready
  shell: |
    while [ `oc -n IBM Concert-datastores get pods| grep -v '1/1' | grep -v '2/2' | grep -v '3/3' | grep -c ""` -gt 1 ]
    do
      sleep 30
    done
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1




- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - Cert Manager (optional)'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  





# --------------------------------------------------------------------------------------------------------------------------------------
# Install IBM Concert Kubectl plugin
# --------------------------------------------------------------------------------------------------------------------------------------


- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - IBM Concert Kubectl Plugin - version: {{current_ibmaiops_feature.IBM Concert_version}}'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  



- name: 🚀 IBM Concert - Install Kubectl IBM Concert Plugin
  shell: |
    export MAJ_VERSION=$(echo {{current_ibmaiops_feature.IBM Concert_version | default("251-0") }}|cut -f1 -d-)
    # https://self-hosted.IBM Concert.io/
    if [ -x "$(command -v kubectl-IBM Concert)" ]; then
        echo "Kubectl IBM Concert Plugin already installed"
    else
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        echo "Installing Kubectl IBM Concert Plugin for $OS"
        if [ "${OS}" == "darwin" ]; then
              wget  --user _ --password {{current_agent_key}} https://artifact-public.IBM Concert.io/artifactory/rel-generic-IBM Concert-virtual/infrastructure/kubectl/release-${MAJ_VERSION}/kubectl-IBM Concert-darwin_amd64-release-{{current_ibmaiops_feature.IBM Concert_version | default("251-0") }}.tar.gz
              tar xfvz kubectl-IBM Concert-darwin_amd64-release-{{current_ibmaiops_feature.IBM Concert_version | default("241-0") }}.tar.gz
              sudo mv kubectl-IBM Concert /usr/local/bin/kubectl-IBM Concert
              rm kubectl-IBM Concert-darwin_amd64-release-{{current_ibmaiops_feature.IBM Concert_version | default("241-0") }}.tar.gz
        else
              wget  --user _ --password {{current_agent_key}} https://artifact-public.IBM Concert.io/artifactory/rel-generic-IBM Concert-virtual/infrastructure/kubectl/release-${MAJ_VERSION}/kubectl-IBM Concert-linux_amd64-release-{{current_ibmaiops_feature.IBM Concert_version | default("251-0") }}.tar.gz
              tar xfvz kubectl-IBM Concert-linux_amd64-release-{{current_ibmaiops_feature.IBM Concert_version | default("251-0") }}.tar.gz
              mv kubectl-IBM Concert /usr/local/bin/kubectl-IBM Concert
              rm kubectl-IBM Concert-linux_amd64-release-{{current_ibmaiops_feature.IBM Concert_version | default("251-0") }}.tar.gz
        fi
    fi
    if [ -x "$(command -v kubectl-IBM Concert)" ]; then
        /usr/local/bin/kubectl-IBM Concert -v
        echo "✅ Kubectl IBM Concert Plugin installed"
    else
        echo "❗❗❗ Kubectl IBM Concert Plugin NOT installed. ERROR!!!!!"
        echo "❗❗❗ Probably wrong IBM Concert_version. Check at https://self-hosted.IBM Concert.io"
        exit 1
    fi
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    #verbosity: 1



# --------------------------------------------------------------------------------------------------------------------------------------
# Get Info
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - Namespaces and Secrets'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  


- name: 🚀 IBM Concert - Get BASE_DOMAIN
  shell: |
    CLUSTER_ROUTE=$(oc get routes console -n openshift-console | tail -n 1 2>&1 ) 
    CLUSTER_FQDN=$( echo $CLUSTER_ROUTE | awk '{print $2}')
    CLUSTER_NAME=${CLUSTER_FQDN##*console.}


    #BASE_DOMAIN="dev-aiops-IBM Concert-core.$CLUSTER_NAME"
    BASE_DOMAIN="$CLUSTER_NAME"
    echo $BASE_DOMAIN
    
  ignore_errors: true
  register: output
        
- name: 🚀 IBM Concert - Set BASE_DOMAIN - {{ output.stdout_lines }} 
  set_fact: BASE_DOMAIN={{ output.stdout_lines[0] }} 



# --------------------------------------------------------------------------------------------------------------------------------------
# Create Namespaces
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 IBM Concert - Create Namespaces
  shell: |
    # namespaces
    # operator
    oc create ns IBM Concert-operator
    oc -n IBM Concert-operator adm policy add-scc-to-user privileged -z IBM Concert-selfhosted-operator
    oc -n IBM Concert-operator adm policy add-cluster-role-to-user cluster-admin -z IBM Concert-selfhosted-operator
    #core
    oc create ns IBM Concert-core
    oc label ns IBM Concert-core app.kubernetes.io/name=IBM Concert-core
    oc -n IBM Concert-core adm policy add-scc-to-user anyuid -z default
    oc -n IBM Concert-core adm policy add-scc-to-user anyuid -z IBM Concert-core
    #units
    oc create ns IBM Concert-units
    oc label ns IBM Concert-units app.kubernetes.io/name=IBM Concert-units
    oc -n IBM Concert-units adm policy add-scc-to-user anyuid -z default
    #datastores
    oc create ns IBM Concert-datastores
    oc label ns IBM Concert-datastores app.kubernetes.io/name=IBM Concert-datastores
    oc -n IBM Concert-datastores adm policy add-scc-to-user anyuid -z default
    oc -n IBM Concert-datastores adm policy add-scc-to-group anyuid -z IBM Concert-datastores
    oc adm policy add-scc-to-user privileged system:serviceaccount:IBM Concert-datastores:default
    oc adm policy add-scc-to-group privileged system:serviceaccount:IBM Concert-datastores
    oc adm policy add-scc-to-user hostmount-anyuid system:serviceaccount:IBM Concert-datastores:default
    oc adm policy add-scc-to-group hostmount-anyuid system:serviceaccount:IBM Concert-datastores

  ignore_errors: true
  register: output
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1


# --------------------------------------------------------------------------------------------------------------------------------------
# Create Pull Secrets
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 IBM Concert - Create Pull Secrets
  shell: |
    oc -n IBM Concert-operator create secret docker-registry IBM Concert-registry \
        --docker-username=_ \
        --docker-password={{current_agent_key}} \
        --docker-server=artifact-public.IBM Concert.io    
    oc -n IBM Concert-core create secret docker-registry IBM Concert-registry \
        --docker-username=_ \
        --docker-password={{current_agent_key}} \
        --docker-server=artifact-public.IBM Concert.io  
    oc -n IBM Concert-core create secret docker-registry IBM Concert-registry-old \
        --docker-username=_ \
        --docker-password={{current_agent_key}} \
        --docker-server=containers.IBM Concert.io  
    oc -n IBM Concert-units create secret docker-registry IBM Concert-registry \
        --docker-username=_ \
        --docker-password={{current_agent_key}} \
        --docker-server=artifact-public.IBM Concert.io  
    oc -n IBM Concert-datastores create secret docker-registry IBM Concert-registry \
        --docker-username=_ \
        --docker-password={{current_agent_key}} \
        --docker-server=artifact-public.IBM Concert.io  

    # create core secrets
    oc -n IBM Concert-core label secret IBM Concert-registry app.kubernetes.io/name=IBM Concert
    oc -n IBM Concert-units label secret IBM Concert-registry app.kubernetes.io/name=IBM Concert
    oc -n IBM Concert-datastores label secret IBM Concert-registry app.kubernetes.io/name=IBM Concert

    kubectl patch -n IBM Concert-operator serviceaccount default -p '{"imagePullSecrets": [{"name": "IBM Concert-registry"}]}'
    kubectl patch -n IBM Concert-datastores serviceaccount default -p '{"imagePullSecrets": [{"name": "IBM Concert-registry"}]}'
    kubectl patch -n IBM Concert-units serviceaccount default -p '{"imagePullSecrets": [{"name": "IBM Concert-registry"}]}'
    kubectl patch -n IBM Concert-core serviceaccount default -p '{"imagePullSecrets": [{"name": "IBM Concert-registry"}]}'



  ignore_errors: true
  register: output
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1







# --------------------------------------------------------------------------------------------------------------------------------------
# Create Operator
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - IBM Concert Operator - version: {{current_ibmaiops_feature.IBM Concert_version}}'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  


- name: 🚀 IBM Concert - Create Operator
  shell: |
    #switch project
    oc project IBM Concert-operator

    sleep 15

    oc create clusterrolebinding IBM Concert-operator-admin --clusterrole=cluster-admin --serviceaccount=IBM Concert-operator:IBM Concert-operator

    # deploy operator
    oc -n IBM Concert-operator secrets link IBM Concert-operator IBM Concert-registry --for=pull
    oc -n IBM Concert-operator secrets link IBM Concert-operator-webhook IBM Concert-registry --for=pull

    # Enable Datastores CRD 
    # cat <<EOF > values.yaml
    # operator:
    #   extraArgs:
    #     - "--datastores=true"
    #   # securityContext:
    #   #   allowPrivilegeEscalation: true
    #   #   readOnlyRootFilesystem: false
    #   #   runAsNonRoot: false
    # EOF
    # #kubectl IBM Concert operator apply --namespace=IBM Concert-operator --values ./values.yaml
    
    
    kubectl IBM Concert operator apply --namespace=IBM Concert-operator

    oc annotate namespace IBM Concert-datastores scheduler.alpha.kubernetes.io/defaultTolerations-
    oc annotate namespace IBM Concert-datastores openshift.io/node-selector-

    kubectl patch -n IBM Concert-operator serviceaccount IBM Concert-operator-webhook -p '{"imagePullSecrets": [{"name": "IBM Concert-registry"}]}'
    kubectl patch -n IBM Concert-operator serviceaccount IBM Concert-operator -p '{"imagePullSecrets": [{"name": "IBM Concert-registry"}]}'

  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1






# --------------------------------------------------------------------------------------------------------------------------------------
# Create Configuration
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Create {{current_ibmaiops_feature.kind}} - Core and Unit Configurations'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  




- name: 🚀 IBM Concert - Get License
  shell: |
    #get license
    echo "Current Sales Key: {{current_sales_key}}"
    kubectl IBM Concert license download --sales-key {{current_sales_key}}
    echo "Downloaded License"
    echo "-----------------------------------------------------------"
    cat ./license.json
    echo "-----------------------------------------------------------"
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    #verbosity: 1


- name: 🚀 IBM Concert - Create TLS Ingress Secrets
  shell: |
    oc -n IBM Concert-core delete secret  IBM Concert-tls
    openssl req -x509 -newkey rsa:2048 -keyout tls.key -out tls.crt -days 365 -nodes -subj "/O=IBM/CN=*.{{BASE_DOMAIN}}" -addext "subjectAltName = DNS:{{BASE_DOMAIN}}"
    oc -n IBM Concert-core create secret tls IBM Concert-tls --cert=./tls.crt --key=./tls.key
    oc -n IBM Concert-core label secret IBM Concert-tls app.kubernetes.io/name=IBM Concert
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT 
  debug:
    var: output.stdout_lines
    verbosity: 1


- name: 🚀 IBM Concert - Get POSTGRES PASSWORD
  shell: |
    POSTGRES_PWD=$(oc get secret postgres.postgres.credentials.postgresql.acid.zalan.do -o json -n IBM Concert-datastores | jq -r .data.password | base64 -d)
    echo $POSTGRES_PWD
  ignore_errors: true
  register: POSTGRES_PWD
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT 
  debug:
    var: POSTGRES_PWD.stdout
- name: 🚀 IBM Concert - Save POSTGRES PASSWORD {{ POSTGRES_PWD.stdout }} 
  set_fact: POSTGRES_PWD={{ POSTGRES_PWD.stdout }} 

- name: 🚀 IBM Concert - Get CASSANDRA PASSWORD
  shell: |
    CASSANDRA_PWD=$(oc get secret IBM Concert-superuser -o json -n IBM Concert-datastores | jq -r .data.password | base64 -d)
    echo $CASSANDRA_PWD
  ignore_errors: true
  register: CASSANDRA_PWD
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT 
  debug:
    var: CASSANDRA_PWD.stdout
- name: 🚀 IBM Concert - Save CASSANDRA PASSWORD {{ CASSANDRA_PWD.stdout }} 
  set_fact: CASSANDRA_PWD={{ CASSANDRA_PWD.stdout }} 


- name: 🚀 IBM Concert - Get KAFKA PASSWORD
  shell: |
    KAFKA_PWD=$(oc get secret strimzi-kafka-user -o json -n IBM Concert-datastores | jq -r .data.password | base64 -d)
    echo $KAFKA_PWD
  ignore_errors: true
  register: KAFKA_PWD
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT 
  debug:
    var: KAFKA_PWD.stdout
- name: 🚀 IBM Concert - Save KAFKA PASSWORD {{ KAFKA_PWD.stdout }} 
  set_fact: KAFKA_PWD={{ KAFKA_PWD.stdout }} 


- name: 🚀 IBM Concert - Get Config File
  ansible.builtin.template:
    src: ./templates/IBM Concert/IBM Concert-config.j2
    dest: ./config.yaml


- name: 🚀 IBM Concert - Create Core Config
  shell: |
    echo "-----------------------------------------------------------"
    echo " ✅ Core Config"
    echo "-----------------------------------------------------------"
    #prep core resources
    #local directory must exist
    cat ./config.yaml
    oc -n IBM Concert-core delete secret IBM Concert-core --ignore-not-found
    oc -n IBM Concert-core create secret generic IBM Concert-core --namespace IBM Concert-core --from-file=./config.yaml
  ignore_errors: false
  register: output
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    #verbosity: 1


- name: 🚀 IBM Concert - Create Unit Config
  shell: |
    echo "-----------------------------------------------------------"
    echo " ✅ IBM Concert License"
    echo "-----------------------------------------------------------"
    cat ./license.json
    echo "-----------------------------------------------------------"
    #cat ./config.yaml
    #create dev unit secret
    export LICENSE_STRING=$(cat license.json | sed -e 's/\[//g' -e 's/\"//g' -e 's/\]//g')
    echo "license: $LICENSE_STRING" > config.yaml
    echo "licenses: [ \"$LICENSE_STRING\"]" >> config.yaml
    echo "agentKeys:" >> config.yaml
    echo "  - {{current_agent_key}}" >> config.yaml
    echo "initialAdminPassword: {{current_admin_pass}}" >> config.yaml
    echo "initialAdminUser: {{current_ibmaiops_feature.IBM Concert_admin_user}}" >> config.yaml
    echo "-----------------------------------------------------------"
    echo " ✅ Unit Config"
    echo "-----------------------------------------------------------"
    oc -n IBM Concert-units create secret generic aiops-dev --from-file=./config.yaml
    cat ./config.yaml

    # rm -f config.yaml
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    #verbosity: 1










# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for Operator being ready
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - 🕦 Wait for Operator to become ready (about 2-3 minutes)  - If this hangs delete/restart the Pod from IBM Concert-operator Namespace'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  



- name:   🕦 IBM Concert - Wait for Operator to become ready (if this hangs delete Pod in IBM Concert-operators)
  shell: |
    while [ `oc -n IBM Concert-operator get pods| grep '1/1' | grep -c ""` -lt 2 ]
    do
      sleep 45
      oc delete pod $(oc -n IBM Concert-operator get pods --no-headers| grep -v 'Running' |awk '{print$1}'):-notfound  --ignore-not-found -n IBM Concert-operator
    done
  ignore_errors: true
  register: output
  args:
    executable: /bin/bash
- name: 🟣  OUTPUT
  debug:
    var: output.stdout_lines
    verbosity: 1




# --------------------------------------------------------------------------------------------------------------------------------------
# Install Core CR
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - IBM Concert Core Instance'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  


- name: 🚀 IBM Concert - Create IBM Concert Core Instance
  kubernetes.core.k8s:
    state: present
    template: ./templates/IBM Concert/IBM Concert-core.j2


  
# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for Core CR being ready
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - 🕦 Wait for Core to become ready (about 5-10 minutes) - Started at $(date +%H:%M) UTC'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  


- name:   🕦 IBM Concert - HACK - Wait for cashier-rollup
  shell: oc -n IBM Concert-core get deployment cashier-rollup --no-headers
  register: kubectl_get_pods
  until: '"cashier-rollup" in kubectl_get_pods.stdout'
  retries: 500
  delay: 15


- name:   🕦 IBM Concert - HACK - Scale to 0 for cashier-rollup
  shell: oc scale deployment  -n IBM Concert-core cashier-rollup --replicas=0


- name:   🕦 IBM Concert - Wait for Core Instance to become ready
  shell: oc -n IBM Concert-core get core IBM Concert-core -o=custom-columns=STATUS:.status.componentsStatus --no-headers
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "Ready"
  retries: 500
  delay: 15


# oc scale deployment  -n IBM Concert-core cashier-rollup --replicas=0


# --------------------------------------------------------------------------------------------------------------------------------------
# Install Unit CR
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - IBM Concert Unit Instance'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  


- name: 🚀 IBM Concert - Create IBM Concert Unit Instance
  kubernetes.core.k8s:
    state: present
    template: ./templates/IBM Concert/IBM Concert-unit.j2


# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for Unit CR being ready
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - 🕦 Wait for Unit to become ready (about 5-10 minutes) - Started at $(date +%H:%M) UTC'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  

- name:   🕦 IBM Concert - Wait for Unit Instance to become ready
  shell: oc -n IBM Concert-units get unit aiops-dev -o=custom-columns=STATUS:.status.componentsStatus --no-headers
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "Ready"
  retries: 500
  delay: 15


# - name: 💊 CERTIFICATES - Patch Certificates for TechZone IPI
#   shell: |
#     CLUSTER_ROUTE=$(oc get routes console -n openshift-console | tail -n 1 2>&1 )
#     CLUSTER_FQDN=$( echo $CLUSTER_ROUTE | awk '{print $2}')
#     CLUSTER_NAME=${CLUSTER_FQDN##*console.}


#     if [[ $CLUSTER_NAME =~ "cloud.techzone.ibm.com" ]];
#     then
#       echo "✅ Seems that you're on Techzone IPI"  
#       echo "✅ Let's patch the certificates"  
#       oc get secret -n openshift-ingress letsencrypt-certs -o jsonpath='{.data.tls\.crt}'  | base64 --decode > cert.crt
#       oc get secret -n openshift-ingress letsencrypt-certs -o jsonpath='{.data.tls\.key}' | base64 --decode > cert.key
#       sed -e '1,34d' cert.crt > ca.crt

#       oc -n IBM Concert-core get secret IBM Concert-tls -o yaml > backup_IBM Concert-tls.yaml

#       oc -n IBM Concert-core delete secret IBM Concert-tls
#       oc -n IBM Concert-core create secret tls IBM Concert-tls  --cert=./cert.crt --key=./cert.key


#       oc delete pod $(oc -n IBM Concert-core get pods| grep acceptor|awk '{print$1}'):-notfound  --ignore-not-found -n IBM Concert-core --ignore-not-found
#       oc delete pod $(oc -n IBM Concert-core get pods| grep gateway|awk '{print$1}'):-notfound  --ignore-not-found -n IBM Concert-core --ignore-not-found
#     else
#         echo "✅ Seems that you're NOT on Techzone IPI"  
#         echo "✅ No need to patch the certificates any further"  
#     fi

#   register: certificate_patch
#   ignore_errors: true
#   args:
#     executable: /bin/bash

# --------------------------------------------------------------------------------------------------------------------------------------
# Create Routes
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - Routes and Patches'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  




- name: 🚀 IBM Concert - Create Routes
  kubernetes.core.k8s:
    namespace: IBM Concert-datastores
    state: present
    template: ./templates/IBM Concert/IBM Concert-routes.j2


- name:   🕦 IBM Concert - HACK - Scale to 1 for cashier-rollup
  shell: oc scale deployment  -n IBM Concert-core cashier-rollup --replicas=1

# - name: 🚀 IBM Concert - Scale Operator to 0 and Patch Appdata-Writer 
#   shell: |
#     oc scale deployment  -n IBM Concert-operator IBM Concert-operator --replicas=0
#     oc patch Deployment -n IBM Concert-core appdata-writer  -p '{"spec": {"template": {"spec": {"containers": [{"name": "appdata-writer","securityContext": {"capabilities": {"drop": ["ALL"]},"privileged": true,"runAsNonRoot": false,"readOnlyRootFilesystem": false,"allowPrivilegeEscalation": true}}]}}}}'     
#     oc delete pod $(oc -n IBM Concert-core get pods| grep appdata-reader-|awk '{print$1}') -n IBM Concert-core
#   ignore_errors: true
#   register: output
#   args:
#     executable: /bin/bash
# - name: 🟣  OUTPUT
#   debug:
#     var: output.stdout_lines
#     verbosity: 1








