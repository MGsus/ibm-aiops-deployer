
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Waiting for IBM AIOPS installation to finish
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************
    


- name: Log
  shell: |
    export MESSAGE=" ðŸ•¦ Wait for IBM AIOps to become ready for HACK"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_ibmaiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_ibmaiops_feature.kind}}.log
  ignore_errors: true

- name: ðŸ“£ OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ff7700'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - ðŸ•¦ Wait for IBM AIOps to become ready for HACK - Started at $(date +%H:%M) UTC'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  


# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for {{ current_ibmaiops_cluster.project }} Namespace to be ready
# --------------------------------------------------------------------------------------------------------------------------------------

- name: ðŸ•¦ CHECK -  Wait for more than > 60 pods in namespace {{ current_ibmaiops_cluster.project }} (this might take some time)
  shell: |
    NUM_PODS=$(oc get po -n {{ current_ibmaiops_cluster.project }} |grep Running| wc -l)
    echo $NUM_PODS
  register: kubectl_num_pods
  until: kubectl_num_pods.stdout|int > 60
  retries: 500
  delay: 15




- name: ðŸš€ IBM AIOPS - HACK
  shell: |
    export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

    echo "Creating CronJob and ConfigMap for Kafka Connection Secret management in namespace ${AIOPS_NAMESPACE}"

    cat << EOF | oc apply -f -
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: aiops-set-kafka-connection-secret-cm
      namespace: ${AIOPS_NAMESPACE}
    data:
      set-kafka-secret.sh: |
        #!/bin/bash

        AIOPS_NAMESPACE=${AIOPS_NAMESPACE}
        AIOPS_NAME="\$(/hack/preload_im_data/util/kubectl get installations.orchestrator.aiops.ibm.com -o jsonpath='{.items[0].metadata.name}')"
        AIOPS_UID="\$(/hack/preload_im_data/util/kubectl get installation.orchestrator.aiops.ibm.com \$AIOPS_NAME -o jsonpath='{.metadata.uid}')"

        while : ; do
          KAFKA_READY="\$(/hack/preload_im_data/util/kubectl get kafkauser.ibmevents.ibm.com cp4waiops-cartridge-kafka-auth-0 -n "\${AIOPS_NAMESPACE}" && /hack/preload_im_data/util/kubectl get secret iaf-system-cluster-ca-cert -n "\${AIOPS_NAMESPACE}")"
          if [[ $? -ne 0 ]]; then
            echo "Kafka user cp4waiops-cartridge-kafka-auth-0 or secret iaf-system-cluster-ca-cert not yet ready... Waiting 5 minutes to retry"
            sleep 300
          else
            break
          fi
        done

        AUTH_SECRET="\$(/hack/preload_im_data/util/kubectl get kafkauser.ibmevents.ibm.com cp4waiops-cartridge-kafka-auth-0 -n "\${AIOPS_NAMESPACE}" -o jsonpath='{.status.secret}')"

        while : ; do
          KAFKA_READY="\$(/hack/preload_im_data/util/kubectl get secret "\${AUTH_SECRET}" -n "\${AIOPS_NAMESPACE}")"
          if [[ $? -ne 0 ]]; then
            echo "Kafka auth secret \${AUTH_SECRET} not yet ready... Waiting 5 minutes to retry"
            sleep 300
          else
            break
          fi
        done

        AUTH_MECHANISM="\$(/hack/preload_im_data/util/kubectl get kafkauser.ibmevents.ibm.com cp4waiops-cartridge-kafka-auth-0 -n "\${AIOPS_NAMESPACE}" -o jsonpath='{.spec.authentication.type}')"
        AUTH_MECHANISM="\${AUTH_MECHANISM^^}"
        KAFKA_CERT="\$(/hack/preload_im_data/util/kubectl get secret iaf-system-cluster-ca-cert -n "\${AIOPS_NAMESPACE}" -o go-template='{{index .data "ca.crt" | base64decode}}')"
        HOST="iaf-system-kafka-bootstrap.\${AIOPS_NAMESPACE}.svc"
        PORT="9093"
        BOOTSTRAP_SERVERS="\${HOST}:\${PORT}"
        USER="\$(/hack/preload_im_data/util/kubectl get kafkauser.ibmevents.ibm.com cp4waiops-cartridge-kafka-auth-0 -n "\${AIOPS_NAMESPACE}" -o jsonpath='{.status.username}')" 
        PASSWORD="\$(/hack/preload_im_data/util/kubectl get secret "\${AUTH_SECRET}" -n "\${AIOPS_NAMESPACE}" -o go-template='{{index .data "password" | base64decode}}')"
        /hack/preload_im_data/util/kubectl create secret generic "\${AIOPS_NAME}-kafka-secret" --from-literal "authMechanism"="\${AUTH_MECHANISM}" --from-literal "bootstrapServers"=\${BOOTSTRAP_SERVERS} --from-literal "caCertificate"="\${KAFKA_CERT}" --from-literal "host"=\${HOST} --from-literal "port"=\${PORT} --from-literal "username"="\${USER}" --from-literal "password"="\${PASSWORD}"
        /hack/preload_im_data/util/kubectl patch secret "\${AIOPS_NAME}-kafka-secret" --type=json -p='[{"op":"add","path":"/metadata/ownerReferences","value":[{"apiVersion":"orchestrator.aiops.ibm.com/v1alpha1","kind":"Installation","name":"'\${AIOPS_NAME}'","uid":"'\${AIOPS_UID}'","controller":true,"blockOwnerDeletion":true}]}]'
    EOF

    cat << EOF | oc apply -f -
    apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: aiops-set-kafka-connection-secret
      namespace: ${AIOPS_NAMESPACE}
    spec:
      schedule: '@hourly'
      jobTemplate:
        spec:
          template:
            spec:
              containers:
              - name: kafkaconnection
                image: 'icr.io/cpopen/ibm-aiops-orchestrator@sha256:3236e6342b2c04ab7a710cc7e408d79ddaa446486d3d71f4fc6a30d0bbf9305b'
                command: ["/script/set-kafka-secret.sh"]
                volumeMounts:
                - name: script
                  mountPath: "/script"
                securityContext:
                    allowPrivilegeEscalation: false
                    privileged: false
                    capabilities:
                        drop: ["ALL"]
                    runAsNonRoot: true
                    seccompProfile:
                        type: "RuntimeDefault"
              volumes:
              - name: script
                configMap:
                  name: aiops-set-kafka-connection-secret-cm
                  defaultMode: 0777
              restartPolicy: OnFailure
              serviceAccountName: ibm-aiops-orchestrator-controller-manager
    EOF

    timestamp=$(date +%s)

    oc create job --from=cronjob/aiops-set-kafka-connection-secret "aiops-set-kafka-connection-secret-${timestamp}" -n ${AIOPS_NAMESPACE}


  ignore_errors: true
  args:
    executable: /bin/bash

