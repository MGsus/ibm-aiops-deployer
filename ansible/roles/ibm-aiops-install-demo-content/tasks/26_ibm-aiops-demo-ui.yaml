---

# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Generic Event Webhook 
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

- name: 🛰️  START - AIOPS DEMO UI
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"



- name: Log
  shell: |
    export MESSAGE="Create DEMO UI"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_ ibm-aiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_ ibm-aiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ ibm-aiops_feature.kind}} - Create DEMO UI'    
    EOF
  ignore_errors: true
  when: global_config.create_ocp_notifications | default(true) == true  



- name: 🚀 DEMO-UI - Delete old instance (ignore problems in this step))
  shell: |
    export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    oc delete deployment -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui --ignore-not-found
    oc delete job -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui-create-config --ignore-not-found
    oc delete job -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui-create-config-events --ignore-not-found
    oc delete job -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui-create-config-logs --ignore-not-found
    oc delete job -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui-create-config-metrics --ignore-not-found
    oc delete cm -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui-config --ignore-not-found
    oc delete cm -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui-config-events --ignore-not-found
    oc delete cm -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui-config-logs --ignore-not-found
    oc delete cm -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui-config-metrics --ignore-not-found
  register: CERT_ELEMENT
  ignore_errors: true



- name: 🚀 DEMO-UI - Set Demo UI Password from instance configuration
  set_fact: current_demoui_pwd={{current_ ibm-aiops_feature.demoui_pwd | default('P4ssw0rd!')}}
  when: global_config.global_password is undefined or global_config.global_password=="NONE"


- name: 🚀 DEMO-UI - Set Demo UI Password from global configuration
  set_fact: current_demoui_pwd={{global_config.global_password}}
  when: global_config.global_password is defined and global_config.global_password!="NONE"


- name: 🟣  DEMO-UI -  Demo UI Password {{current_demoui_pwd}}
  debug:
    var: current_demoui_pwd
    verbosity: 1





- name: 🚀 DEMO-UI - Create IBM AIOPS Demo UI Configuration
  kubernetes.core.k8s:
    state: present
    template: ./templates/aiops-demo-ui/create- ibm-aiops-demo-cm.j2
  ignore_errors: true

# --------------------------------------------------------------------------------------------------------------------------------------
# Wait for Demo UI Configuration being ready
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🕦 DEMO-UI - Wait for Demo UI Configuration being ready
  shell: |   
          export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
          oc get cm -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui-config --ignore-not-found --no-headers|grep -c ""
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "1"
  retries: 500
  delay: 15


- name: 🚀 DEMO-UI - Create IBM AIOPS Demo UI Deployment
  kubernetes.core.k8s:
    state: present
    template: ./templates/aiops-demo-ui/create- ibm-aiops-demo-deploy.j2
  ignore_errors: true

# Wait for Demo UI being ready
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🕦 DEMO-UI - Wait for Demo UI being ready
  shell: | 
            export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
            oc get pod -n $AIOPS_NAMESPACE-demo-ui |grep ibm-aiops-demo-ui|grep "1/1"|grep -v "Terminating"|grep -c ""
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout == "1"
  retries: 50
  delay: 15



- name: Log
  shell: |
    export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    export MESSAGE="Installing DEMO UI"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "              📥 DEMO UI Login:"  >> ../install_{{current_ ibm-aiops_feature.kind}}.log
    echo ""  >> ../install_{{current_ ibm-aiops_feature.kind}}.log
    echo "                🌏 URL:      http://$(oc get route -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui -o jsonpath={.spec.host})"  >> ../install_{{current_ ibm-aiops_feature.kind}}.log
    echo "                🔐 Token:    $(oc get cm -n $AIOPS_NAMESPACE-demo-ui ibm-aiops-demo-ui-config -o jsonpath='{.data.TOKEN}' && echo)"  >> ../install_{{current_ ibm-aiops_feature.kind}}.log
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_ ibm-aiops_feature.kind}}.log
  ignore_errors: true

