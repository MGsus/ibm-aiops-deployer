#!/bin/bash
clear
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo "         ________  __  ___     ___    ________       "     
echo "        /  _/ __ )/  |/  /    /   |  /  _/ __ \____  _____"
echo "        / // __  / /|_/ /    / /| |  / // / / / __ \/ ___/"
echo "      _/ // /_/ / /  / /    / ___ |_/ // /_/ / /_/ (__  ) "
echo "     /___/_____/_/  /_/    /_/  |_/___/\____/ .___/____/  "
echo "                                           /_/            "
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo " 🚀  IBMAIOPS - Inject Metrics from File"
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"


# Files are being loaded from /tmp/customer-data/metrics
export ROOT_PATH=/tmp/customer-data/metrics
export MAX_FILE_SIZE_FOR_REST=10




#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT MODIFY BELOW
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


echo " "
echo "   ------------------------------------------------------------------------------------------------------------------------------"
echo "   ------------------------------------------------------------------------------------------------------------------------------"
echo "   🚀  Initializing..."
echo "   ------------------------------------------------------------------------------------------------------------------------------"

echo "        📥 Get Working Directories"
export WORKING_DIR_METRICS=$ROOT_PATH/


echo "        🔐 Getting credentials"
export AIOPS_NAMESPACE=$(oc get po -A|grep aimanager-operator |awk '{print$1}')

oc project $AIOPS_NAMESPACE >/dev/null 2>/dev/null

export ROUTE=$(oc get route | grep ibm-nginx-svc | awk '{print $2}')
USER=$(oc -n $AIOPS_NAMESPACE get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 -d)
PASS=$(oc -n $AIOPS_NAMESPACE get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 -d)

TOKEN=$(curl -k -X POST https://$ROUTE/icp4d-api/v1/authorize -H 'Content-Type: application/json' -d "{\"username\": \"$USER\",\"password\": \"$PASS\"}" 2>/dev/null|awk -F'"' '{print $(NF-1)}')
echo "     "
echo "     "




echo "       ----------------------------------------------------------------------------------------------------------------------------------------"
echo "        🔎  Parameters for Ingestion"
echo "       ----------------------------------------------------------------------------------------------------------------------------------------"
echo "     "
echo "          🌐 API URL                         : https://$ROUTE"
#echo "          📝 Token                           : $TOKEN"
echo "     "
echo "          🛠️ Maximum File Size               : $MAX_FILE_SIZE_FOR_REST"
echo "          📂 Directory for Metric Files      : $WORKING_DIR_METRICS"
echo "   "
echo "       ----------------------------------------------------------------------------------------------------------------------------------------"
echo "       🗄️  Metric Files to be loaded"
echo "       ----------------------------------------------------------------------------------------------------------------------------------------"
ls -1 $WORKING_DIR_METRICS | grep "json"| sed 's/^/            /'
echo "     "
echo "     ----------------------------------------------------------------------------------------------------------------------------------------"



echo "   "
echo "   "
echo "   "
echo "   "
echo "   "
echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
echo "     🚀  Preparing Metric Data"
echo "   ----------------------------------------------------------------------------------------------------------------------------------------"

mkdir /tmp/metric-files/  >/tmp/demo.log 2>&1 
rm -f -r /tmp/metric-files/* 


for actFile in $(ls -1 $WORKING_DIR_METRICS | grep "json"); 
do 

#------------------------------------------------------------------------------------------------------------------------------------
#  Prepare the Data
#------------------------------------------------------------------------------------------------------------------------------------
    echo "   "
    echo "       -------------------------------------------------------------------------------------------------------------------------------------"
    echo "        🛠️ Preparing Data for file $actFile"
    echo "       -------------------------------------------------------------------------------------------------------------------------------------"

    #------------------------------------------------------------------------------------------------------------------------------------
    #  Create file and structure in /tmp
    #------------------------------------------------------------------------------------------------------------------------------------
    echo "          🛠️ Copy $actFile to /tmp/training-files-logs/"

    cp $WORKING_DIR_METRICS/$actFile /tmp/metric-files/$actFile

    cd /tmp/metric-files/
    echo "          🔨 Splitting Metric File $actFile"
    split -l $MAX_FILE_SIZE_FOR_REST -a 10 ./$actFile $actFile"_"

    rm /tmp/metric-files/$actFile
    export NUM_FILES=$(ls | wc -l)
    #ls -1 /tmp/metric-files/*aaa*| sed 's/^/             /'
    cd -  >/tmp/demo.log 2>&1 


    echo "          ✅ OK - Total File Count: $NUM_FILES"

done




echo "   "
echo "   "
echo "   "
echo "   "
echo "   "
echo ""
echo ""
echo "   ------------------------------------------------------------------------------------------------------------------------------"
read -p "    ❓ Do you want to load the data❓ [y,N] " DO_COMM
echo "   ------------------------------------------------------------------------------------------------------------------------------"
if [[ $DO_COMM == "y" ||  $DO_COMM == "Y" ]]; then
    echo ""

    echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
    echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
    echo "     🚀  Loading Metric Data"
    echo "   ----------------------------------------------------------------------------------------------------------------------------------------"

    #------------------------------------------------------------------------------------------------------------------------------------
    #  Inject the Data
    #------------------------------------------------------------------------------------------------------------------------------------
    echo "          🌏  Injecting Metrics Data" 
    echo "             Quit with Ctrl-Z"
    echo "         -------------------------------------------------------------------------------------------------------------------------------------"
    ACT_COUNT=0
    for FILE in /tmp/metric-files/*; do 
        if [[ $FILE =~ "aaa"  ]]; then

            rm /tmp/inject_tmp.json
            rm /tmp/inject.json
            echo '{"groups":['> /tmp/inject_tmp.json
            cat $FILE >> /tmp/inject_tmp.json
            echo ']}'>> /tmp/inject_tmp.json
            cat /tmp/inject_tmp.json | tr '\n' '§' | sed -e "s/,§\]\}/\]\}/g"| tr '§' '\n'> /tmp/inject.json

          
            ACT_COUNT=`expr $ACT_COUNT + 1`
            echo "          Injecting file ($ACT_COUNT/$(($NUM_FILES-1))) - $FILE"

            #echo "curl -k  -X POST \"https://${ROUTE}/aiops/api/app/metric-api/v1/metrics\" --header 'Content-Type: application/json' --header \"Authorization: Bearer ${TOKEN}\" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --data @/tmp/inject_tmp.json)"
            export result=$(curl -k -s -X POST "https://${ROUTE}/aiops/api/app/metric-api/v1/metrics" --header 'Content-Type: application/json' --header "Authorization: Bearer ${TOKEN}" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --data @/tmp/inject.json)

            echo "          ✅ OK: $result"
            echo " "
        fi
    done
fi


echo "--------------------------------------------------------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------------------------------------------------------"
echo " ✅ DONE... You're good to go...."
echo "--------------------------------------------------------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------------------------------------------------------"
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"


exit 1

export AIOPS_NAMESPACE=$(oc get po -A|grep aimanager-operator |awk '{print$1}')

echo "   ------------------------------------------------------------------------------------------------------------------------------"
echo "   🔎  Get Cassandra Authentication"	
echo "   ------------------------------------------------------------------------------------------------------------------------------"
export CASSANDRA_PASS=$(oc get secret aiops-topology-cassandra-auth-secret -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 -d)
export CASSANDRA_USER=$(oc get secret aiops-topology-cassandra-auth-secret -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 -d)

echo "CASSANDRA_USER:$CASSANDRA_USER"
echo "CASSANDRA_PASS:$CASSANDRA_PASS"


oc exec -ti -n $AIOPS_NAMESPACE aiops-topology-cassandra-0 -- bash -c "/opt/ibm/cassandra/bin/cqlsh --ssl -u $CASSANDRA_USER -p $CASSANDRA_PASS -e \"SELECT * FROM tararam.md_metric_resource;\""
oc exec -ti -n $AIOPS_NAMESPACE aiops-topology-cassandra-0 -- bash -c "/opt/ibm/cassandra/bin/cqlsh --ssl -u $CASSANDRA_USER -p $CASSANDRA_PASS -e \"SELECT * FROM tararam.md_resource;\""
oc exec -ti -n $AIOPS_NAMESPACE aiops-topology-cassandra-0 -- bash -c "/opt/ibm/cassandra/bin/cqlsh --ssl -u $CASSANDRA_USER -p $CASSANDRA_PASS -e \"SELECT * FROM tararam.md_group;\""

oc exec -ti -n $AIOPS_NAMESPACE aiops-topology-cassandra-0 -- bash -c "/opt/ibm/cassandra/bin/cqlsh --ssl -u $CASSANDRA_USER -p $CASSANDRA_PASS -e \"SELECT COUNT(*) FROM tararam.dt_metric_value;\""
