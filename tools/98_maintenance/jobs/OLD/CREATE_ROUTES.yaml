#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#     ________  __  ___   __________    ___         __                        __  _
#    /  _/ __ )/  |/  /  /  _/_  __/   /   | __  __/ /_____  ____ ___  ____ _/ /_(_)___  ____
#    / // __  / /|_/ /   / /  / /     / /| |/ / / / __/ __ \/ __ `__ \/ __ `/ __/ / __ \/ __ \
#  _/ // /_/ / /  / /  _/ /  / /     / ___ / /_/ / /_/ /_/ / / / / / / /_/ / /_/ / /_/ / / / /
# /___/_____/_/  /_/  /___/ /_/     /_/  |_\__,_/\__/\____/_/ /_/ /_/\__,_/\__/_/\____/_/ /_/
#
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------"
#  CREATE_ROUTES
#
#  IBM AIOps
#
#  ¬©2024 nikh@ch.ibm.com
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"
# ---------------------------------------------------------------------------------------------------------------------------------------------------"


apiVersion: v1                     
kind: Namespace
metadata:
  name: ibm-installer
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: ibm-installer-admin
  namespace: ibm-installer
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ibm-installer-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: ibm-installer-admin
    namespace: ibm-installer
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ibm-installer-default-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: default
    namespace: ibm-installer
---
apiVersion: batch/v1
kind: Job
metadata:
  name: aiops-create-routes
  namespace: ibm-installer
spec:
  serviceAccountname: ibm-installer-admin
  template:
    spec:
      containers:
        - name: install
          image: quay.io/niklaushirt/ibm-aiops-tools:2.3
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "64Mi"
              cpu: "150m"
            limits:
              memory: "2024Mi"
              cpu: "1200m"
          command:
            - /bin/sh
            - -c
            - |
              #!/bin/bash
              #set -x

              echo "*****************************************************************************************************************************"
              echo " ‚úÖ STARTING: Create Routes"
              echo "*****************************************************************************************************************************"
              echo ""
              echo "  ‚è≥ INSTALLATION START TIMESTAMP: $(date)"
              echo ""
              echo "------------------------------------------------------------------------------------------------------------------------------"
    
              echo "------------------------------------------------------------------------------------------------------------------------------"
              echo " üöÄ Create Routes"
              
              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

              oc patch namespace default --type=json -p '[{"op":"add","path":"/metadata/labels","value":{"network.openshift.io/policy-group":"ingress"}}]'



              existing=$(oc get route topology-merge -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                # oc create route passthrough topology-merge -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-merge --port=https-merge-api
              fi


              existing=$(oc get route topology-rest -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                # oc create route passthrough topology-rest -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-rest-observer --port=https-rest-observer-admin
              fi


              existing=$(oc get route topology-file -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                # oc create route passthrough topology-file -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-file-observer --port=https-file-observer-admin
              fi


              existing=$(oc get route topology-manage -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                # oc create route passthrough topology-manage -n $AIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
              fi


              existing=$(oc get route topology-file-api -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                # oc create route passthrough topology-file-api -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-file-observer --port=https-file-observer-api
              fi


              existing=$(oc get route job-manager -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                oc create route passthrough job-manager -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-lad-flink-api --port=ssl-port
              fi


              existing=$(oc get route job-manager-policy -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                oc create route passthrough job-manager-policy -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-ir-lifecycle-flink-api --port=ssl-port
              fi


              existing=$(oc get route ai-platform-api -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                oc create route passthrough ai-platform-api -n $AIOPS_NAMESPACE  --service=aimanager-aio-ai-platform-api-server --port=4000 --insecure-policy=Redirect --wildcard-policy=None
              fi


              existing=$(oc get route datalayer-api -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                oc create route passthrough --insecure-policy="Redirect" datalayer-api -n $AIOPS_NAMESPACE  --service=aiops-ir-core-ncodl-api --port=secure-port --insecure-policy=Redirect --wildcard-policy=None
              fi


              existing=$(oc get route aimanager-aio-controller -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                oc create route passthrough aimanager-aio-controller -n $AIOPS_NAMESPACE  --service=aimanager-aio-controller
              fi


              existing=$(oc get route aiops-ir-core-ncodl-api -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                oc set env deploy -n $AIOPS_NAMESPACE aiops-ir-core-ncodl-api ENABLE_SWAGGER_UI="true" 
              fi


              existing=$(oc get route sparkadmin -n $AIOPS_NAMESPACE --no-headers|awk '{print$1}')
              if [[ $existing == "" ]]; then
                echo "Create Route"
                oc create route edge sparkadmin -n $AIOPS_NAMESPACE  --service=aiops-ir-analytics-spark-master
                oc expose svc aiops-ir-analytics-spark-master -n $AIOPS_NAMESPACE --name spark
              fi



              echo ""
              echo ""
              echo "  ‚è≥ INSTALLATION END TIMESTAMP: $(date)"
              echo ""
              echo "*****************************************************************************************************************************"
              echo " ‚úÖ DONE"
              echo "*****************************************************************************************************************************"


              while true
              do
                sleep 1000
              done

      restartPolicy: Never
  backoffLimit: 500
