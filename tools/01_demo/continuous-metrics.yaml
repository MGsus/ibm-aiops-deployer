
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ibm-aiops-simulate-metrics
  namespace: ibm-installer
  annotations: {}
spec:
  selector:
    matchLabels:
      app: ibm-aiops-simulate-metrics
  replicas: 1
  template:
    metadata:
      labels:
        app: ibm-aiops-simulate-metrics
    spec:
      containers:
        - name: ibm-aiops-simulate-metrics
          image: quay.io/niklaushirt/ibm-aiops-tools:2.3
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            requests:
              memory: "64Mi"
              cpu: "150m"
            limits:
              memory: "2024Mi"
              cpu: "1200m"
          command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              #set -x


              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "                                                                                                                                                   "
              echo " 🚀 Simulate Metrics                                                                                                                                                "
              echo "                                                                                                                                                   "
              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "  "
              echo "  "
              echo "  ⏳ METRIC_DELAY $METRIC_DELAY"
              echo ""


              export INSTALL_REPO='https://github.com/niklaushirt/ibm-aiops-deployer.git -b dev_latest'

              # 1 Second Delay between Metrics
              export METRIC_DELAY=1


                # FORMAT:
                #   resource_name, metric_name, group_name, fixed base value, random value
                #
                #   Example for "fixed base value"=100 and 2random value"=10
                #   Gives metrics values between 100 and 110
                #   If you put "fixed base value"=ITERATIONS then it will use the counter (for PodRestarts for example)
                declare -a MY_RES_IDS=(
                  "mysql-deployment,MemoryUsagePercent,MemoryUsage,45,20"
                  "mysql-deployment,MemoryUsageMean,MemoryUsage,30000,1000"
                  "mysql-deployment,MemoryUsageMax,MemoryUsage,35000,4000"
                  "mysql-deployment,PodRestarts,PodRestarts,1,1"
                  "mysql-deployment,TransactionsPerSecond,TransactionsPerSecond,169,40"
                  "mysql-deployment,Latency,Latency,2,1"
                  "ratings-deployment,MemoryUsagePercent,MemoryUsage,45,10"
                  "ratings-deployment,MemoryUsageMean,MemoryUsage,30000,1000"
                  "ratings-deployment,MemoryUsageMax,MemoryUsage,35000,10000"
                  "ratings-deployment,PodRestarts,PodRestarts,1,1"
                  "ratings-deployment,TransactionsPerSecond,TransactionsPerSecond,160,40"
                  "ratings-deployment,Latency,Latency,2,1"
                  "demo-resource1,Demo_CPU,DemoGroup,40,30"
                  "demo-resource1,Demo_MEMORY,DemoGroup,20,20"
                  "demo-resource1,Demo_LATENCY,DemoGroup,90,20"
                  "demo-resource2,Demo_CPU,DemoGroup,10,10"
                  "demo-resource2,Demo_MEMORY,DemoGroup,40,20"
                  "demo-resource2,Demo_LATENCY,DemoGroup,20,20"
                  "demo-resource3,Demo_CPU,DemoGroup,20,80"
                  "demo-resource3,Demo_MEMORY,DemoGroup,60,20"
                  "demo-resource3,Demo_LATENCY,DemoGroup,40,20"
                )


                # Number of Global Iterations
                export METRICS_SKEW="-13M"

                #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                # DO NOT MODIFY BELOW
                #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                #-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                export MAX_ITERATIONS=100
                export TIME_INCREMENT_MINUTES="0" 
                export TIME_INCREMENT_SECONDS="10" 
                export ADD_MSECONDS_STRING=000
                export DATE_FORMAT="+%s"
                export DATE_FORMAT_READABLE="+%Y-%m-%d %H:%M:%S"



                echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
                echo "     🔐  Getting credentials"
                export AIOPS_NAMESPACE=$(oc get po -A|grep aimanager-operator |awk '{print$1}')

                oc project $AIOPS_NAMESPACE >/dev/null 2>/dev/null

                export ROUTE=$(oc get route | grep ibm-nginx-svc | awk '{print $2}')
                USER=$(oc -n $AIOPS_NAMESPACE get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 -d)
                PASS=$(oc -n $AIOPS_NAMESPACE get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 -d)

                TOKEN=$(curl -k -X POST https://$ROUTE/icp4d-api/v1/authorize -H 'Content-Type: application/json' -d "{\"username\": \"$USER\",\"password\": \"$PASS\"}" 2>/dev/null|awk -F'"' '{print $(NF-1)}')

                export BASE_TIMESTAMP=$(date "$DATE_FORMAT")
                export HR_BASE_TIMESTAMP=$(date "$DATE_FORMAT_READABLE")


                #--------------------------------------------------------------------------------------------------------------------------------------------
                #  Launch Log Injection as a parallel thread
                #--------------------------------------------------------------------------------------------------------------------------------------------
                echo ""
                echo ""
                echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
                echo "     🚀  Inject Synthetic Metrics"
                echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
                echo ""

                export  ADD_SECONDS=120
                export  ITERATIONS=0


                # Loop forever
                while true
                do

                      MY_TIMESTAMP=$(date "$DATE_FORMAT")"$ADD_MSECONDS_STRING"
                      act_timestamp_readable=$(date "$DATE_FORMAT_READABLE")
                      echo "        ♻️  Metrics at "$act_timestamp_readable" - "$MY_TIMESTAMP


                      echo '{"groups":['> /tmp/tmp_inject.json
                      ((ITERATIONS++))


                      for value in "${MY_RES_IDS[@]}"
                      do
                            #echo ":"$value| sed 's/^/             /'

                            MY_RESOURCE_ID=$(echo $value | cut -d',' -f1)
                            MY_METRIC_NAME=$(echo $value | cut -d',' -f2)
                            MY_GROUP_ID=$(echo $value | cut -d',' -f3)
                            MY_FIX_VALUE=$(echo $value | cut -d',' -f4)
                            #echo ":"$MY_FIX_VALUE
                            if [[ $MY_FIX_VALUE == "ITERATIONS" ]]; then
                                  MY_FIX_VALUE=$(( BUNDLE_ITERATIONS*MAX_ITERATIONS_BUNDLE+ITERATIONS ))
                                  #echo ":::::"$MY_FIX_VALUE
                            fi
                            MY_VARIATION=$(echo $value | cut -d',' -f5)

                            export CURRENT_VALUE=$(($RANDOM%$MY_VARIATION+$MY_FIX_VALUE))

                            # echo ":"$MY_RESOURCE_ID
                            echo "             📦 "$MY_METRIC_NAME:$MY_METRIC_NAME:$MY_RESOURCE_ID
                            # echo ":"$MY_GROUP_ID
                            # echo ":"$MY_FIX_VALUE
                            # echo ":"$MY_VARIATION
                            # echo "CURRENT_VALUE:"$CURRENT_VALUE
                            # echo "MY_TIMESTAMP:"$MY_TIMESTAMP

                            echo "{\"timestamp\":\"$MY_TIMESTAMP\",\"resourceID\":\"$MY_RESOURCE_ID\",\"metrics\":{\"$MY_METRIC_NAME\":$CURRENT_VALUE},\"attributes\":{\"group\":\"$MY_GROUP_ID\",\"node\":\"$MY_RESOURCE_ID\"}},">> /tmp/tmp_inject.json
                      done 

                      echo "{\"timestamp\":\"$MY_TIMESTAMP\",\"resourceID\":\"$MY_RESOURCE_ID\",\"metrics\":{\"$MY_METRIC_NAME\":$CURRENT_VALUE},\"attributes\":{\"group\":\"$MY_GROUP_ID\",\"node\":\"$MY_RESOURCE_ID\"}}">> /tmp/tmp_inject.json
                      echo ']}'>> /tmp/tmp_inject.json

                      export result=$(curl $CURL_FLAGS -X POST "https://${ROUTE}/aiops/api/app/metric-api/v1/metrics" --header 'Content-Type: application/json' --header "Authorization: Bearer ${TOKEN}" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --data @/tmp/tmp_inject.json)
                      echo "         ✅ OK: $result"
                      echo "   "

                      sleep $METRIC_DELAY
                      if [[ $ITERATIONS -gt $REFRESH_ITERATIONS ]]; then
                        echo "   "
                        echo "   "
                        echo "         🚀 Refreshing Token"
                        echo "   "
                        echo "   "
                        USER=$(oc -n $AIOPS_NAMESPACE get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 -d)
                        PASS=$(oc -n $AIOPS_NAMESPACE get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 -d)
                        TOKEN=$(curl -k -X POST https://$ROUTE/icp4d-api/v1/authorize -H 'Content-Type: application/json' -d "{\"username\": \"$USER\",\"password\": \"$PASS\"}" 2>/dev/null|awk -F'"' '{print $(NF-1)}')
                        ITERATIONS=0
                      fi

                done 


                while true
                do
                  sleep 1000
                done




          env:
            - name: METRIC_DELAY
              value : "1"
            - name: REFRESH_ITERATIONS
              value : "1000"
            - name: CURL_FLAGS
              value : "-s -k"

      imagePullSecrets: []
  paused: false
