#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#     ________  __  ___   __________    ___         __                        __  _
#    /  _/ __ )/  |/  /  /  _/_  __/   /   | __  __/ /_____  ____ ___  ____ _/ /_(_)___  ____
#    / // __  / /|_/ /   / /  / /     / /| |/ / / / __/ __ \/ __ `__ \/ __ `/ __/ / __ \/ __ \
#  _/ // /_/ / /  / /  _/ /  / /     / ___ / /_/ / /_/ /_/ / / / / / / /_/ / /_/ / /_/ / / / /
# /___/_____/_/  /_/  /___/ /_/     /_/  |_\__,_/\__/\____/_/ /_/ /_/\__,_/\__/_/\____/_/ /_/
#
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------"
---
apiVersion: v1                     
kind: Namespace
metadata:
  name: ibm-installer
---




# ------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT MODIFY BELOW
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: ibm-installer-admin
  namespace: ibm-installer
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ibm-installer-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: ibm-installer-admin
    namespace: ibm-installer
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ibm-installer-default-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: default
    namespace: ibm-installer
---
apiVersion: batch/v1
kind: Job
metadata:
  name: troubleshoot-3-1-create-missing-topology
  namespace: ibm-installer
spec:
  serviceAccount: ibm-installer-admin
  template:
    metadata:
      labels:
        app: ibm-installer
    spec:
      serviceAccount: ibm-installer-admin
      containers:
        - name: install
          image: quay.io/niklaushirt/ibm-aiops-tools:2.2
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "64Mi"
              cpu: "150m"
            limits:
              memory: "2024Mi"
              cpu: "1200m"
          command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              #set -x
              echo "***************************************************************************************************************************************************"
              echo "***************************************************************************************************************************************************"
              echo "                                                                                                                                                   "
              echo " üöÄ Create missing Topology                                                                                                                                            "
              echo "                                                                                                                                                   "
              echo "***************************************************************************************************************************************************"

              echo "------------------------------------------------------------------------------------------------------------------------------"
              echo " üöÄ Getting Installation source from GitHub"
              echo "------------------------------------------------------------------------------------------------------------------------------"
              echo "   üì• Clone Repo https://github.com/niklaushirt/ibm-aiops-deployer.git -b dev_latest"
              git clone https://github.com/niklaushirt/ibm-aiops-deployer.git -b dev_latest
              cd ibm-aiops-deployer

              echo ""
              echo ""
              echo "------------------------------------------------------------------------------------------------------------------------------"
              echo "   üîé This Repo includes those latestet Commits"
              git log|head -n 17
              echo ""
              echo ""




              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # K8s OBSERVER ROBOT SHOP
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE K8S OBSERVER ROBOT SHOP
              # set -x

              # export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
              # echo "Creating K8s Observer"


              # # Create Route
              # oc create route passthrough aiops-topology-kubernetes-observer -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-kubernetes-observer --port=https-kubernetes-observer-api

              # # Get Credentials
              # export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              # export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              # export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

              # export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-kubernetes-observer -o jsonpath={.spec.host})

              # echo "  URL: $TOPO_ROUTE"
              # echo "  LOGIN: $LOGIN"

              # echo "Getting local K8s API"

              # API_TOKEN=$(oc create token -n default demo-admin --duration=999999999s)
              # if [[ $API_TOKEN == "" ]];
              # then    
              #   echo "  ‚ùó Demo User does not exist -  using expiring kubeadmin token"
              #   API_TOKEN=$(oc create token -n default demo-admin --duration=999999999s)
              # fi
              # API_URL=$(oc status|grep -m1 "In project"|awk '{print$6}')
              # API_SERVER=$(echo $API_URL| cut -d ":" -f 2| tr -d '/')
              # API_PORT=$(echo $API_URL| cut -d ":" -f 3)

              # echo "            üåè API URL:               $API_URL"
              # echo "            üåè API SERVER:            $API_SERVER"
              # echo "            üåè API PORT:              $API_PORT"
              # echo "            üîê API Token:             $API_TOKEN"

              # echo ""
              # echo "Creating OBSERVER"


              # curl -k -X POST "$TOPO_ROUTE/1.0/kubernetes-observer/jobs/load" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --header 'Accept: application/json' -u $LOGIN --header "Content-Type: application/json" \
              #   -d "{
              #     \"unique_id\": \"demo-robot-shop\",
              #     \"type\": \"load\",
              #     \"description\": \"Automatically created by Nicks scripts\",
              #     \"parameters\": {
              #       \"data_center\": \"robot-shop\",
              #       \"master_ip\": \"$API_SERVER\",
              #       \"api_port\": \"$API_PORT\",
              #       \"token\": {
              #         \"hiddenString\": \"$API_TOKEN\",
              #         \"encrypted\": false
              #       },
              #       \"trust_all_certificate\": true,
              #       \"hide_terminated_pods\": false,
              #       \"connect_read_timeout_ms\": 5000,
              #       \"custom_resource_definitions\": [
              #         \"string\"
              #       ],
              #       \"role_token\": false,
              #       \"namespace\": \"robot-shop\",
              #       \"namespaceGroupParameters\": {
              #         \"correlate\": true
              #       }
              #     },
              #     \"schedule\": {
              #         \"interval\": null,
              #         \"units\": null,
              #         \"nextRunTime\": null
              #       },
              #     \"write_file_observer_file\": false,
              #     \"scheduleRequest\": true
              #   }"





              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # K8s OBSERVER SOCK SHOP
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE K8S OBSERVER SOCK SHOP
              set -x

              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
              echo "Creating K8s Observer"


              # Create Route
              oc create route passthrough aiops-topology-kubernetes-observer -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-kubernetes-observer --port=https-kubernetes-observer-api

              # Get Credentials
              export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

              export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-kubernetes-observer -o jsonpath={.spec.host})

              echo "  URL: $TOPO_ROUTE"
              echo "  LOGIN: $LOGIN"

              echo "Getting local K8s API"

              API_TOKEN=$(oc create token -n default demo-admin --duration=999999999s)
              if [[ $API_TOKEN == "" ]];
              then    
                echo "  ‚ùó Demo User does not exist -  using expiring kubeadmin token"
                API_TOKEN=$(oc create token -n default demo-admin --duration=999999999s)
              fi
              API_URL=$(oc status|grep -m1 "In project"|awk '{print$6}')
              API_SERVER=$(echo $API_URL| cut -d ":" -f 2| tr -d '/')
              API_PORT=$(echo $API_URL| cut -d ":" -f 3)

              echo "            üåè API URL:               $API_URL"
              echo "            üåè API SERVER:            $API_SERVER"
              echo "            üåè API PORT:              $API_PORT"
              echo "            üîê API Token:             $API_TOKEN"

              echo ""
              echo "Creating OBSERVER"


              curl -k -X POST "$TOPO_ROUTE/1.0/kubernetes-observer/jobs/load" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --header 'Accept: application/json' -u $LOGIN --header "Content-Type: application/json" \
                -d "{
                  \"unique_id\": \"demo-sock-shop\",
                  \"type\": \"load\",
                  \"description\": \"Automatically created by Nicks scripts\",
                  \"parameters\": {
                    \"data_center\": \"sock-shop\",
                    \"master_ip\": \"$API_SERVER\",
                    \"api_port\": \"$API_PORT\",
                    \"token\": {
                      \"hiddenString\": \"$API_TOKEN\",
                      \"encrypted\": false
                    },
                    \"trust_all_certificate\": true,
                    \"hide_terminated_pods\": false,
                    \"connect_read_timeout_ms\": 5000,
                    \"custom_resource_definitions\": [
                      \"string\"
                    ],
                    \"role_token\": false,
                    \"namespace\": \"sock-shop\",
                    \"namespaceGroupParameters\": {
                      \"correlate\": true
                    }
                  },
                  \"schedule\": {
                      \"interval\": null,
                      \"units\": null,
                      \"nextRunTime\": null
                    },
                  \"write_file_observer_file\": false,
                  \"scheduleRequest\": true
                }"






              # *************************************************************************************************************************************************
              # --------------------------------------------------------------------------------------------------------------------------------------
              # Connection Details
              # --------------------------------------------------------------------------------------------------------------------------------------
              # *************************************************************************************************************************************************


              # --------------------------------------------------------------------------------------------------------------------------------------
              # AIOPS
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE BUSINESS CRITICALITIES
              set -x
                  
              echo "Create CREATE BUSINESS CRITICALITIES"
              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              # oc create route passthrough topology-manage -n $AIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
              export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})


              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              echo "    URL: $TOPO_MGT_ROUTE/1.0/topology/metadata"
              echo "    LOGIN: $LOGIN"

                  
              curl -XPOST -k \
              "$TOPO_MGT_ROUTE/1.0/topology/metadata" \
              -H 'accept: application/json' \
              -H 'content-type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -u $LOGIN \
              -d '    {

                "name": "Platinum",
                "keyIndexName": "aiopsBusinessCriticalityMetadata::platinum",
                "description": "Platinum priority",
                "entityTypes": [
                  "AIOPS_BUSINESS_CRITICALITY"
                ],
                "businessCriticalityValue": 100,
                "tags": [
                  "ASM_UI_CONFIG"
                ]
              }'


              curl -XPOST -k \
              "$TOPO_MGT_ROUTE/1.0/topology/metadata" \
              -H 'accept: application/json' \
              -H 'content-type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -u $LOGIN \
              -d '    {

                "name": "Gold",
                "keyIndexName": "aiopsBusinessCriticalityMetadata::gold",
                "description": "Gold priority",
                "de   scription": "Gold priority",
                "entityTypes": [
                  "AIOPS_BUSINESS_CRITICALITY"
                ],
                "businessCriticalityValue": 75,
                "tags": [
                  "ASM_UI_CONFIG"
                ]
              }'

                curl -XPOST -k \
              "$TOPO_MGT_ROUTE/1.0/topology/metadata" \
              -H 'accept: application/json' \
              -H 'content-type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -u $LOGIN \
              -d '    {

                "name": "Silver",
                "keyIndexName": "aiopsBusinessCriticalityMetadata::silver",
                "description": "Silver priority",
                "entityTypes": [
                  "AIOPS_BUSINESS_CRITICALITY"
                ],
                "businessCriticalityValue": 50,
                "tags": [
                  "ASM_UI_CONFIG"
                ]
              }'


              curl -XPOST -k \
              "$TOPO_MGT_ROUTE/1.0/topology/metadata" \
              -H 'accept: application/json' \
              -H 'content-type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -u $LOGIN \
              -d '    {

                "name": "Bronze",
                "keyIndexName": "aiopsBusinessCriticalityMetadata::bronze",
                "description": "Bronze priority",
                "entityTypes": [
                  "AIOPS_BUSINESS_CRITICALITY"
                ],
                "businessCriticalityValue": 25,
                "tags": [
                  "ASM_UI_CONFIG"
                ]
              }'

              curl -XPOST -k \
              "$TOPO_MGT_ROUTE/1.0/topology/metadata" \
              -H 'accept: application/json' \
              -H 'content-type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -u $LOGIN \
              -d '    {

                "name": "Bronze",
                "keyIndexName": "aiopsBusinessCriticalityMetadata::none",
                "description": "Lowes priority",
                "entityTypes": [
                  "AIOPS_BUSINESS_CRITICALITY"
                ],
                "businessCriticalityValue": 1,
                "tags": [
                  "ASM_UI_CONFIG"
                ]
              }'



              # --------------------------------------------------------------------------------------------------------------------------------------
              # AIOPS
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE MERGE RULES
              set -x

              echo "Create Rules - Starting..."

              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              #oc delete route  topology-merge -n $AIOPS_NAMESPACE
              # oc create route passthrough topology-merge -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-merge --port=https-merge-api
              export MERGE_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-merge -o jsonpath={.spec.host})


              echo "    URL: $MERGE_ROUTE/1.0/merge/"
              echo "    LOGIN: $LOGIN"


              echo "  Wait 5 seconds"
              sleep 5

              echo "  Create Match RULE... MatchTokenDeployName"
              curl -X "POST" "$MERGE_ROUTE/1.0/merge/rules" --insecure \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -H 'content-type: application/json' \
                  -u $LOGIN \
                  -d $'{
                  "name": "MatchTokenDeployName",
                  "ruleType": "matchTokensRule",
                  "entityTypes": ["deployment"],
                  "tokens": ["name"],
                  "ruleStatus": "enabled",
                  "observers": ["*"],
                  "providers": ["*"]
              }'

              echo "  Create Merge RULE... MergeTokenDeployName"
              curl -X "POST" "$MERGE_ROUTE/1.0/merge/rules" --insecure \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -H 'content-type: application/json' \
                  -u $LOGIN \
                  -d $'{
                  "name": "MergeTokenDeployName",
                  "ruleType": "mergeRule",
                  "entityTypes": ["deployment","statefulset","container","router"],
                  "tokens": ["name"],
                  "ruleStatus": "enabled",
                  "observers": ["*"],
                  "providers": ["*"]
              }'

              echo "  Create Match RULE... MatchTokenNetworkinterfacesID"
              curl -X "POST" "$MERGE_ROUTE/1.0/merge/rules" --insecure \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -H 'content-type: application/json' \
                  -u $LOGIN \
                  -d $'{
                  "name": "MatchTokenNetworkinterfacesID",
                  "ruleType": "mergeRule",
                  "entityTypes": ["networkinterface"],
                  "tokens": ["uniqueId"],
                  "ruleStatus": "enabled",
                  "observers": ["*"],
                  "providers": ["*"]
              }'

              echo "  Disable RULE k8ServiceName..."

              export RULE_ID=$(curl "$MERGE_ROUTE/1.0/merge/rules?ruleType=matchTokensRule&_filter=name=k8ServiceName&_include_count=false&_field=*" -s --insecure \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -u $LOGIN| jq -r "._items[0]._id")



              curl -XPUT "$MERGE_ROUTE/1.0/merge/rules/$RULE_ID" -s --insecure \
                  --header 'Content-Type: application/json' \
                  --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -u $LOGIN \
                  -d '{
                    "name": "k8ServiceName",
                    "keyIndexName": "k8ServiceName",
                    "ruleType": "matchTokensRule",
                    "entityTypes": [
                      "service"
                    ],
                    "tokens": [
                      "name"
                    ],
                    "ruleStatus": "disabled",
                    
                    "observers": [
                      "kubernetes-observer"
                    ],
                    "providers": [
                      "*"
                    ]
                  }' 


              echo "  Disable RULE instana-observer-events-kubernetes-service..."

              export RULE_ID=$(curl "$MERGE_ROUTE/1.0/merge/rules?ruleType=matchTokensRule&_filter=name=instana-observer-events-kubernetes-service&_include_count=false&_field=*" -s --insecure \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -u $LOGIN| jq -r "._items[0]._id")



              curl -XPUT "$MERGE_ROUTE/1.0/merge/rules/$RULE_ID" -s --insecure \
                  --header 'Content-Type: application/json' \
                  --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -u $LOGIN \
                  -d '{
                    "name": "k8ServiceName",
                    "keyIndexName": "k8ServiceName",
                    "ruleType": "matchTokensRule",
                    "entityTypes": [
                      "service"
                    ],
                    "tokens": [
                      "name"
                    ],
                    "ruleStatus": "disabled",
                    
                    "observers": [
                      "kubernetes-observer"
                    ],
                    "providers": [
                      "*"
                    ]
                  }' 






              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # LOAD TOPOLOGY CONFIGURATION
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - LOAD TOPOLOGY CONFIGURATION
              set -x

              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})
              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"
              export LOGIN_TOKEN=$(echo -n $LOGIN|base64|tr -d '\n')
              export TOPO_MGT_HOST=$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})

              echo "    HOST:         $TOPO_MGT_HOST"
              echo "    URL:          $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
              echo "    LOGIN:        $LOGIN"
              echo "    LOGIN_TOKEN:  $LOGIN_TOKEN"

              # kubectl exec -ti -n $AIOPS_NAMESPACE $(oc get po -n $AIOPS_NAMESPACE|grep topology-topology|awk '{print$1}'|head -1) -- /opt/ibm/graph.tools/bin/backup_ui_config -out backup.json
              # kubectl cp -n $AIOPS_NAMESPACE $(oc get po -n $AIOPS_NAMESPACE|grep topology-topology|awk '{print$1}'|head -1):/opt/ibm/netcool/asm/data/tools/backup.json ./backup.json
              # open ./backup.json



              echo "Delete existing Topology Customization"
              curl -XGET -k \
              "$TOPO_MGT_ROUTE/1.0/topology/metadata?_field=*" \
              -H 'accept: application/json' \
              -H 'content-type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -u $LOGIN|jq -r '._items[] | select(.maxLabelLength=="")|._id'>/tmp/customItems.json

              curl -XGET -k \
              "$TOPO_MGT_ROUTE/1.0/topology/metadata?_field=*" \
              -H 'accept: application/json' \
              -H 'content-type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -u $LOGIN|jq -r '._items[] | select(.uniqueId=="globalSettings")|._id'>>/tmp/customItems.json  
              cat /tmp/customItems.json

              while read line; 
              do 
                echo "DELETE: $line"
                curl -XDELETE -k \
                "$TOPO_MGT_ROUTE/1.0/topology/metadata/$line" \
                -H 'accept: application/json' \
                -H 'content-type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -u $LOGIN
              done < /tmp/customItems.json




              echo "Upload Topology Customization"
              OS=$(uname -s | tr '[:upper:]' '[:lower:]')
                    TOPOLOGY_CUSTOM_FILE="/ibm-aiops-deployer/ansible/roles/ibm-aiops-demo-content/templates/topology/asm_config.json"

              cp $TOPOLOGY_CUSTOM_FILE /tmp/asm_config.json
              sed -i -e "s/MY_TOPO_URL/$TOPO_MGT_HOST/g" /tmp/asm_config.json
              sed -i -e "s/MY_TOKEN/$LOGIN_TOKEN/g" /tmp/asm_config.json


              kubectl cp /tmp/asm_config.json -n $AIOPS_NAMESPACE $(oc get po -n $AIOPS_NAMESPACE|grep topology-topology|awk '{print$1}'|head -1):/opt/ibm/netcool/asm/data/tools/asm_config.json 

              sleep 30 

              echo "Import Topology Customization"
              #kubectl exec -ti -n $AIOPS_NAMESPACE $(oc get po -n $AIOPS_NAMESPACE|grep topology-topology|awk '{print$1}'|head -1) -- find /opt/ibm/netcool/asm/data/tools/
              kubectl exec -ti -n $AIOPS_NAMESPACE $(oc get po -n $AIOPS_NAMESPACE|grep topology-topology|awk '{print$1}'|head -1) -- /opt/ibm/graph.tools/bin/import_ui_config -file asm_config.json






              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # FILE TOPOLOGY ROBOT SHOP
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - COPY OVERLAY TOPOLOGY TO POD ROBOTSHOP
              set -x

              echo "Create Custom Topology - Copy Topology to File Observer"

              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')


              # Get FILE_OBSERVER_POD
              FILE_OBSERVER_POD=$(oc get po -n $AIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')
              echo $FILE_OBSERVER_POD
              LOAD_FILE_NAME="robot-shop-file.txt"

                    FILE_OBSERVER_CAP="/ibm-aiops-deployer/ansible/roles/ibm-aiops-demo-content/templates/topology/$LOAD_FILE_NAME"
              echo $FILE_OBSERVER_POD
              echo $FILE_OBSERVER_CAP
              echo $TARGET_FILE_PATH
              TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
              echo "  Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
              echo "oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}"
              oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}



              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE OVERLAY TOPOLOGY ROBOTSHOP
              set -x

              echo "Create Custom Topology - Create File Observer Job"


              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
              LOAD_FILE_NAME="robot-shop-file.txt"
              TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"



              # Get Credentials
              export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

              export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-file-observer -o jsonpath={.spec.host})
              export JOB_ID=robot-shop-topology

              echo "  URL: $TOPO_ROUTE"
              echo "  LOGIN: $LOGIN"


              # Get FILE_OBSERVER JOB
              curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -H "accept: application/json" \
                -H "Content-Type: application/json" \
                -u $LOGIN \
                -d "{
                \"unique_id\": \"${JOB_ID}\",
                \"description\": \"Automatically created by Nicks scripts\",
                \"parameters\": {
                    \"file\": \"${TARGET_FILE_PATH}\"
                    }
                }"






              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # FILE TOPOLOGY SOCK SHOP
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - COPY OVERLAY TOPOLOGY TO POD SOCKSHOP
              set -x

              echo "Create Custom Topology - Copy Topology to File Observer"

              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')


              # Get FILE_OBSERVER_POD
              FILE_OBSERVER_POD=$(oc get po -n $AIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')
              echo $FILE_OBSERVER_POD
              LOAD_FILE_NAME="sock-shop-file.txt"

                    FILE_OBSERVER_CAP="/ibm-aiops-deployer/ansible/roles/ibm-aiops-demo-content/templates/topology/$LOAD_FILE_NAME"
              echo $FILE_OBSERVER_POD
              echo $FILE_OBSERVER_CAP
              echo $TARGET_FILE_PATH
              TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
              echo "  Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
              echo "oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}"
              oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}


              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE OVERLAY TOPOLOGY SOCKSHOP
              set -x

              echo "Create Custom Topology - Create File Observer Job"


              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
              LOAD_FILE_NAME="sock-shop-file.txt"
              TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"



              # Get Credentials
              export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

              export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-file-observer -o jsonpath={.spec.host})
              export JOB_ID=sock-shop-topology

              echo "  URL: $TOPO_ROUTE"
              echo "  LOGIN: $LOGIN"


              # Get FILE_OBSERVER JOB
              curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -H "accept: application/json" \
                -H "Content-Type: application/json" \
                -u $LOGIN \
                -d "{
                \"unique_id\": \"${JOB_ID}\",
                \"description\": \"Automatically created by Nicks scripts\",
                \"parameters\": {
                    \"file\": \"${TARGET_FILE_PATH}\"
                    }
                }"




              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # FILE TOPOLOGY ACME AIR
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - COPY OVERLAY TOPOLOGY TO POD ACME
              set -x

              echo "Create Custom Topology - Copy Topology to File Observer"

              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')


              # Get FILE_OBSERVER_POD
              FILE_OBSERVER_POD=$(oc get po -n $AIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')
              echo $FILE_OBSERVER_POD
              LOAD_FILE_NAME="acme-file.txt"

                    FILE_OBSERVER_CAP="/ibm-aiops-deployer/ansible/roles/ibm-aiops-demo-content/templates/topology/$LOAD_FILE_NAME"
              TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
              echo $FILE_OBSERVER_POD
              echo $FILE_OBSERVER_CAP
              echo $TARGET_FILE_PATH
              echo "  Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
              echo "oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}"
              oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}




              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE OVERLAY TOPOLOGY ACME
              set -x

              echo "Create Custom Topology - Create File Observer Job"


              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
              LOAD_FILE_NAME="acme-file.txt"
              TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"



              # Get Credentials
              export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

              export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-file-observer -o jsonpath={.spec.host})
              export JOB_ID=acme-topology

              echo "  URL: $TOPO_ROUTE"
              echo "  LOGIN: $LOGIN"


              # Get FILE_OBSERVER JOB
              curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -H "accept: application/json" \
                -H "Content-Type: application/json" \
                -u $LOGIN \
                -d "{
                \"unique_id\": \"${JOB_ID}\",
                \"description\": \"Automatically created by Nicks scripts\",
                \"parameters\": {
                    \"file\": \"${TARGET_FILE_PATH}\"
                    }
                }"




              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # FILE TOPOLOGY TELCO
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - COPY OVERLAY TOPOLOGY TO POD TELCO
              set -x

              echo "Create Custom Topology - Copy Topology to File Observer"

              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')


              # Get FILE_OBSERVER_POD
              FILE_OBSERVER_POD=$(oc get po -n $AIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')
              echo $FILE_OBSERVER_POD
              LOAD_FILE_NAME="telco-fiber-cut-ny-rchmd.txt"

                    FILE_OBSERVER_CAP="/ibm-aiops-deployer/ansible/roles/ibm-aiops-demo-content/templates/topology/$LOAD_FILE_NAME"
              TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
              echo $FILE_OBSERVER_POD
              echo $FILE_OBSERVER_CAP
              echo $TARGET_FILE_PATH
              echo "  Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
              echo "oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}"
              oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}



              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE OVERLAY TOPOLOGY TELCO
              set -x

              echo "Create Custom Topology - Create File Observer Job"


              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
              LOAD_FILE_NAME="telco-fiber-cut-ny-rchmd.txt"
              TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"



              # Get Credentials
              export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

              export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-file-observer -o jsonpath={.spec.host})
              export JOB_ID=telco-fiber-cut-ny-rchmd-topology

              echo "  URL: $TOPO_ROUTE"
              echo "  LOGIN: $LOGIN"


              # Get FILE_OBSERVER JOB
              curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -H "accept: application/json" \
                -H "Content-Type: application/json" \
                -u $LOGIN \
                -d "{
                \"unique_id\": \"${JOB_ID}\",
                \"description\": \"Automatically created by Nicks scripts\",
                \"parameters\": {
                    \"file\": \"${TARGET_FILE_PATH}\"
                    }
                }"





              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE LONDON UNDERGROUND
              set -x

                export TOPOLOGY_NAME=london-underground
                cd ansible


                echo "----------------------------------------------------------------------------------------------------------"
                echo "----------------------------------------------------------------------------------------------------------"
                echo "üöÄ TOPOLOGY - LOAD TOPOLOGY CONFIGURATION - $TOPOLOGY_NAME"
                echo "----------------------------------------------------------------------------------------------------------"


                export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
                export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
                export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
                export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})
                export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

                echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
                echo "    LOGIN: $LOGIN"





                echo "Upload Topology Customization"
                      TOPOLOGY_CUSTOM_FILE="/ibm-aiops-deployer/ansible/roles/ibm-aiops-demo-content/templates/topology/"$TOPOLOGY_NAME"-asm_config.json"
                kubectl cp $TOPOLOGY_CUSTOM_FILE -n $AIOPS_NAMESPACE $(oc get po -n $AIOPS_NAMESPACE|grep topology-topology|awk '{print$1}'|head -1):/opt/ibm/netcool/asm/data/tools/"$TOPOLOGY_NAME"-asm_config.json 

                sleep 30 

                echo "Import Topology Customization"
                #kubectl exec -ti -n $AIOPS_NAMESPACE $(oc get po -n $AIOPS_NAMESPACE|grep topology-topology|awk '{print$1}'|head -1) -- find /opt/ibm/netcool/asm/data/tools/
                kubectl exec -ti -n $AIOPS_NAMESPACE $(oc get po -n $AIOPS_NAMESPACE|grep topology-topology|awk '{print$1}'|head -1) -- /opt/ibm/graph.tools/bin/import_ui_config -file $TOPOLOGY_NAME-asm_config.json




                echo "----------------------------------------------------------------------------------------------------------"
                echo "----------------------------------------------------------------------------------------------------------"
                echo "üöÄ TOPOLOGY - COPY OVERLAY TOPOLOGY TO POD - $TOPOLOGY_NAME"
                echo "----------------------------------------------------------------------------------------------------------"
                echo "Create Custom Topology - Copy Topology to File Observer"


                # Get FILE_OBSERVER_POD
                FILE_OBSERVER_POD=$(oc get po -n $AIOPS_NAMESPACE -l app.kubernetes.io/instance=aiops-topology,app.kubernetes.io/name=file-observer -o jsonpath='{.items[0].metadata.name}')
                echo $FILE_OBSERVER_POD
                LOAD_FILE_NAME=$TOPOLOGY_NAME"-file.txt"

                      FILE_OBSERVER_CAP="/ibm-aiops-deployer/ansible/roles/ibm-aiops-demo-content/templates/topology/$LOAD_FILE_NAME"
                echo $FILE_OBSERVER_POD
                echo $FILE_OBSERVER_CAP
                echo $TARGET_FILE_PATH
                TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"
                echo "  Copying capture file [${FILE_OBSERVER_CAP}] to file observer pod"
                echo "oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}"
                oc cp -n $AIOPS_NAMESPACE ${FILE_OBSERVER_CAP} ${FILE_OBSERVER_POD}:${TARGET_FILE_PATH}






                echo "----------------------------------------------------------------------------------------------------------"
                echo "----------------------------------------------------------------------------------------------------------"
                echo "üöÄ TOPOLOGY - CREATE OVERLAY TOPOLOGY - $TOPOLOGY_NAME"
                echo "----------------------------------------------------------------------------------------------------------"
                echo "Create Custom Topology - Create File Observer Job"


                export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
                LOAD_FILE_NAME=$TOPOLOGY_NAME"-file.txt"
                TARGET_FILE_PATH="/opt/ibm/netcool/asm/data/file-observer/${LOAD_FILE_NAME}"


                # Get Credentials
                export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
                export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
                export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

                export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-file-observer -o jsonpath={.spec.host})
                export JOB_ID=$TOPOLOGY_NAME"-topology"

                echo "  URL: $TOPO_ROUTE"
                echo "  LOGIN: $LOGIN"
                echo "  JOB_ID: $JOB_ID"


                # Get FILE_OBSERVER JOB
                curl -X "POST" "$TOPO_ROUTE/1.0/file-observer/jobs" --insecure \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -H "accept: application/json" \
                  -H "Content-Type: application/json" \
                  -u $LOGIN \
                  -d "{
                  \"unique_id\": \"${JOB_ID}\",
                  \"description\": \"Automatically created by Nicks scripts\",
                  \"parameters\": {
                      \"file\": \"${TARGET_FILE_PATH}\"
                      }
                  }"


                sleep 10


                # ----------------------------------------------------------------------------------------------------------
                # ----------------------------------------------------------------------------------------------------------
                # üöÄ TOPOLOGY - CREATE APPLICATION 
                # ----------------------------------------------------------------------------------------------------------
                # ----------------------------------------------------------------------------------------------------------

                export APP_NAME=underground-central

                echo "----------------------------------------------------------------------------------------------------------"
                echo "----------------------------------------------------------------------------------------------------------"
                echo "üöÄ TOPOLOGY - CREATE APPLICATION - $APP_NAME"
                echo "----------------------------------------------------------------------------------------------------------"

                export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3D"$APP_NAME"-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
                export TEMPLATE_ID_1=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=name%3DTube%20zone%201" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
                export TEMPLATE_ID_2=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=name%3DTube%20zone%201%2B2" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)

                echo "    APP_ID:     "$APP_ID
                echo "    TEMPLATE_ID_1:"$TEMPLATE_ID_1
                echo "    TEMPLATE_ID_2:"$TEMPLATE_ID_2

                echo "Create Custom Topology - Create App"

                if [[ $APP_ID == "" ]];
                then    
                  echo "  Creating Application"
                  curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                  -u $LOGIN \
                  -H 'Content-Type: application/json' \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -d '  {
                      "keyIndexName": "'$APP_NAME'-app",
                      "_correlationEnabled": "true",
                      "iconId": "Underground",
                      "businessCriticality": "Platinum",
                      "vertexType": "group",
                      "correlatable": "true",
                      "disruptionCostPerMin": "200",
                      "name": "Central London stations",
                      "entityTypes": [
                          "waiopsApplication"
                      ],
                      "tags": [
                        "London",
                        "underground"
                      ]
                  }
                '
                else
                  echo "  Application already exists"
                  echo "  Re-Creating Application"
                  curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID" --insecure \
                  -u $LOGIN \
                  -H 'Content-Type: application/json' \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

                  echo "  Creating Application"
                  curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                  -u $LOGIN \
                  -H 'Content-Type: application/json' \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -d '  {
                      "keyIndexName": "'$APP_NAME'-app",
                      "_correlationEnabled": "true",
                      "iconId": "Underground",
                      "businessCriticality": "Platinum",
                      "vertexType": "group",
                      "correlatable": "true",
                      "disruptionCostPerMin": "200",
                      "name": "Central London stations",
                      "entityTypes": [
                          "waiopsApplication"
                      ],
                      "tags": [
                        "London",
                        "underground"
                      ]
                  }
                '
                fi


                sleep 10


                export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dunderground-central-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
                echo "    APP_ID:     "$APP_ID

                echo "----------------------------------------------------------------------------------------------------------"
                echo "----------------------------------------------------------------------------------------------------------"
                echo "üöÄ ADD RESOURCES TO  APPLICATION- $APP_NAME"
                echo "----------------------------------------------------------------------------------------------------------"

                echo "  Add Template 1 Resources"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d "{
                  \"_id\": \"$TEMPLATE_ID_1\"
                }"

                echo "  Add Template 2 Resources"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d "{
                  \"_id\": \"$TEMPLATE_ID_2\"
                }"



                # ----------------------------------------------------------------------------------------------------------
                # ----------------------------------------------------------------------------------------------------------
                # üöÄ TOPOLOGY - CREATE APPLICATION 
                # ----------------------------------------------------------------------------------------------------------
                # ----------------------------------------------------------------------------------------------------------

                export APP_NAME=underground-inner

                echo "----------------------------------------------------------------------------------------------------------"
                echo "----------------------------------------------------------------------------------------------------------"
                echo "üöÄ TOPOLOGY - CREATE APPLICATION - $APP_NAME"
                echo "----------------------------------------------------------------------------------------------------------"

                export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3D"$APP_NAME"-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
                export TEMPLATE_ID_1=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=name%3DTube%20zone%202" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
                export TEMPLATE_ID_2=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=name%3DTube%20zone%202%2B3" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
                export TEMPLATE_ID_3=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=name%3DTube%20zone%202%2F3" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)

                echo "    APP_ID:     "$APP_ID
                echo "    TEMPLATE_ID_1:"$TEMPLATE_ID_1
                echo "    TEMPLATE_ID_2:"$TEMPLATE_ID_2
                echo "    TEMPLATE_ID_3:"$TEMPLATE_ID_3

                echo "Create Custom Topology - Create App"

                if [[ $APP_ID == "" ]];
                then    
                  echo "  Creating Application"
                  curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                  -u $LOGIN \
                  -H 'Content-Type: application/json' \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -d '  {
                      "keyIndexName": "'$APP_NAME'-app",
                      "_correlationEnabled": "true",
                      "iconId": "Underground",
                      "businessCriticality": "Platinum",
                      "vertexType": "group",
                      "correlatable": "true",
                      "disruptionCostPerMin": "200",
                      "name": "Inner London stations",
                      "entityTypes": [
                          "waiopsApplication"
                      ],
                      "tags": [
                        "London",
                        "underground"
                      ]
                  }
                '
                else
                  echo "  Application already exists"
                  echo "  Re-Creating Application"
                  curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID" --insecure \
                  -u $LOGIN \
                  -H 'Content-Type: application/json' \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

                  echo "  Creating Application"
                  curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                  -u $LOGIN \
                  -H 'Content-Type: application/json' \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -d '  {
                      "keyIndexName": "'$APP_NAME'-app",
                      "_correlationEnabled": "true",
                      "iconId": "Underground",
                      "businessCriticality": "Platinum",
                      "vertexType": "group",
                      "correlatable": "true",
                      "disruptionCostPerMin": "200",
                      "name": "Central London stations",
                      "entityTypes": [
                          "waiopsApplication"
                      ],
                      "tags": [
                        "London",
                        "underground"
                      ]
                  }
                '
                fi


                sleep 10


                export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3D"$APP_NAME"-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
                echo "    APP_ID:     "$APP_ID

                echo "----------------------------------------------------------------------------------------------------------"
                echo "----------------------------------------------------------------------------------------------------------"
                echo "üöÄ ADD RESOURCES TO  APPLICATION- $APP_NAME"
                echo "----------------------------------------------------------------------------------------------------------"

                echo "  Add Template 1 Resources"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d "{
                  \"_id\": \"$TEMPLATE_ID_1\"
                }"

                echo "  Add Template 2 Resources"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d "{
                  \"_id\": \"$TEMPLATE_ID_2\"
                }"


                echo "  Add Template 3 Resources"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d "{
                  \"_id\": \"$TEMPLATE_ID_3\"
                }"


                sleep 10


                echo "----------------------------------------------------------------------------------------------------------"
                echo "----------------------------------------------------------------------------------------------------------"
                echo "üöÄ CREATE POLICIES - $APP_NAME"
                echo "----------------------------------------------------------------------------------------------------------"
                export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

                export POLICY_USERNAME=$(oc get secret -n $AIOPS_NAMESPACE aiops-ir-lifecycle-policy-registry-svc -o jsonpath='{.data.username}' | base64 --decode)
                export POLICY_PASSWORD=$(oc get secret -n $AIOPS_NAMESPACE aiops-ir-lifecycle-policy-registry-svc -o jsonpath='{.data.password}' | base64 --decode)
                export POLICY_LOGIN="$POLICY_USERNAME:$POLICY_PASSWORD"
                echo "POLICY_LOGIN: "$POLICY_LOGIN

                oc create route passthrough --insecure-policy="Redirect" policy-api -n $AIOPS_NAMESPACE --service aiops-ir-lifecycle-policy-registry-svc --port ssl-port


                export POLICY_ROUTE=""
                while [[ $POLICY_ROUTE == "" ]]; do
                  export POLICY_ROUTE=$(oc get routes -n $AIOPS_NAMESPACE policy-api -o jsonpath="{['spec']['host']}")
                done
                echo "POLICY_ROUTE: "$POLICY_ROUTE




                export POLICY_ID=london-underground-scope-based-grouping
                export POLICY_NAME="DEMO London-Underground - Scope Grouping"

                echo "----------------------------------------------------------------------------------------------------------"
                echo "üõ†Ô∏è  POLICIES - Create Scope Policy - $POLICY_NAME"

                      POLICY_FILE="/ibm-aiops-deployer/ansible/roles/ibm-aiops-demo-content/templates/policies/"$POLICY_ID".json"

                echo $POLICY_FILE
                cp $POLICY_FILE /tmp/incident_policy.json


                export result=$(curl -XGET -k -s "https://$POLICY_ROUTE/policyregistry.ibm-netcool-prod.aiops.io/v1alpha/system/cfd95b7e-3bc7-4006-a4a8-a73a79c71255/"  \
                    -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                    -H 'content-type: application/json' \
                    -u $POLICY_LOGIN|grep "$POLICY_NAME"|wc -l|tr -d ' ')

                if [[ $result == "0" ]]; then
                    export result="Create Incident Creation Policy "
                    export result=$(curl -XPOST -k -s "https://$POLICY_ROUTE/policyregistry.ibm-netcool-prod.aiops.io/v1alpha/system/cfd95b7e-3bc7-4006-a4a8-a73a79c71255/policies"  \
                    -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                    -H 'content-type: application/json' \
                    -u $POLICY_LOGIN \
                    -d @/tmp/incident_policy.json)
                else 
                    export result="Already exists"
                fi 
                echo $result







              # *************************************************************************************************************************************************
              # --------------------------------------------------------------------------------------------------------------------------------------
              # Patching ASM
              # --------------------------------------------------------------------------------------------------------------------------------------
              # *************************************************************************************************************************************************



                
              # --------------------------------------------------------------------------------------------------------------------------------------
              # Disable Match Token RULE for Services
              # --------------------------------------------------------------------------------------------------------------------------------------


              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - Disable Match Token RULE for Services
              CLUSTER_ROUTE=$(oc get routes console -n openshift-console | tail -n 1 2>&1 ) 
              CLUSTER_FQDN=$( echo $CLUSTER_ROUTE | awk '{print $2}')
              CLUSTER_NAME=${CLUSTER_FQDN##*console.}

              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              export MERGE_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-merge -o jsonpath={.spec.host})


              echo "URL: $MERGE_ROUTE/1.0/merge/"
              echo "LOGIN: $LOGIN"


              echo "Wait 5 seconds"
              sleep 5

              echo "Disable Match Token RULE for Services..."

              export result=$(curl -X "GET" "$MERGE_ROUTE/1.0/merge/rules?_filter=name%3Dk8sGenericNameMatchTokens&ruleType=matchTokensRule" --insecure \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -H 'content-type: application/json' \
                  -u $LOGIN)
              export ruleIDs=$(echo $result| jq "._items")

              export ruleID=$(echo $ruleIDs| jq -r ".[0]._id")

              curl -X "POST" "$MERGE_ROUTE/1.0/merge/rules/$ruleID/?ruleType=matchTokensRule" --insecure \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -H 'content-type: application/json' \
                  -u $LOGIN \
                  -d '{"ruleStatus": "disabled"}'



              echo "Disable Match Token RULE for Instana Services..."

              export result=$(curl -X "GET" "$MERGE_ROUTE/1.0/merge/rules?_filter=name%3Dinstana-observer-events-kubernetes-service&ruleType=matchTokensRule" --insecure \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -H 'content-type: application/json' \
                  -u $LOGIN)
              export ruleIDs=$(echo $result| jq "._items")

              export ruleID=$(echo $ruleIDs| jq -r ".[0]._id")

              curl -X "POST" "$MERGE_ROUTE/1.0/merge/rules/$ruleID/?ruleType=matchTokensRule" --insecure \
                  -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                  -H 'content-type: application/json' \
                  -u $LOGIN \
                  -d '{"ruleStatus": "disabled"}'




              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # TEMPLATE ROBOT SHOP
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE TOPOLOGY TEMPLATES RobotShop
              set -x
                  
              echo "Create Custom Topology - Create Template"
              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              # oc create route passthrough topology-manage -n $AIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
              export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})


              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
              echo "    LOGIN: $LOGIN"

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Drobot-shop-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Drobot-shop-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)

              echo "    APP_ID: $APP_ID"
              echo "    TEMPLATE_ID: $TEMPLATE_ID"

              if [[ $TEMPLATE_ID == "" ]];
              then
                echo "  Create Template"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "robot-shop-template",
                    "_correlationEnabled": "true",
                    "iconId": "application",
                    "businessCriticality": "Gold",
                    "vertexType": "group",
                    "groupTokens": [
                        "namespace:robot-shop"
                    ],
                    "correlatable": "true",
                    "name": "robot-shop-template",
                    "entityTypes": [
                        "completeGroup",
                        "namespace"
                    ],
                    "tags": [
                        "robot-shop-template"
                    ]
                }'
              else
                echo "  Recreate Template"
                curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$TEMPLATE_ID" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

                
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "robot-shop-template",
                    "_correlationEnabled": "true",
                    "iconId": "application",
                    "businessCriticality": "Gold",
                    "vertexType": "group",
                    "groupTokens": [
                        "namespace:robot-shop"
                    ],
                    "correlatable": "true",
                    "name": "robot-shop-template",
                    "entityTypes": [
                        "completeGroup",
                        "namespace"
                    ],
                    "tags": [
                        "robot-shop-template"
                    ]
                }'

              fi






              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # TEMPLATE SOCK SHOP
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE TOPOLOGY TEMPLATES SOCK
              set -x
                  
              echo "Create Custom Topology - Create Template"
              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              # oc create route passthrough topology-manage -n $AIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
              export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})


              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
              echo "    LOGIN: $LOGIN"

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dsock-shop-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dsock-shop-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)

              echo "    APP_ID: $APP_ID"
              echo "    TEMPLATE_ID: $TEMPLATE_ID"

              if [[ $TEMPLATE_ID == "" ]];
              then
                echo "  Create Template"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "sock-shop-template",
                    "_correlationEnabled": "true",
                    "iconId": "application",
                    "businessCriticality": "Gold",
                    "vertexType": "group",
                    "groupTokens": [
                        "namespace:sock-shop"
                    ],
                    "correlatable": "true",
                    "name": "sock-shop-template",
                    "entityTypes": [
                        "completeGroup",
                        "namespace"
                    ],
                    "tags": [
                        "sock-shop-template"
                    ]
                }'
              else
                echo "  Recreate Template"
                curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$TEMPLATE_ID" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

                
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "sock-shop-template",
                    "_correlationEnabled": "true",
                    "iconId": "application",
                    "businessCriticality": "Gold",
                    "vertexType": "group",
                    "groupTokens": [
                        "namespace:sock-shop"
                    ],
                    "correlatable": "true",
                    "name": "sock-shop-template",
                    "entityTypes": [
                        "completeGroup",
                        "namespace"
                    ],
                    "tags": [
                        "sock-shop-template"
                    ]
                }'

              fi






              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # TEMPLATE ACME
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE TOPOLOGY TEMPLATES ACME
              set -x
                  
              echo "Create Custom Topology - Create Template"
              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              # oc create route passthrough topology-manage -n $AIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
              export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})


              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
              echo "    LOGIN: $LOGIN"

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dacme-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dacme-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)

              echo "    APP_ID: $APP_ID"
              echo "    TEMPLATE_ID: $TEMPLATE_ID"

              if [[ $TEMPLATE_ID == "" ]];
              then
                echo "  Create Template"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "acme-template",
                    "_correlationEnabled": "true",
                    "iconId": "application",
                    "businessCriticality": "Gold",
                    "vertexType": "group",
                    "groupTokens": [
                        "namespace:acme"
                    ],
                    "correlatable": "true",
                    "name": "acme-template",
                    "entityTypes": [
                        "completeGroup",
                        "namespace"
                    ],
                    "tags": [
                        "acme-template"
                    ]
                }'
              else
                echo "  Recreate Template"
                curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$TEMPLATE_ID" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

                
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "acme-template",
                    "_correlationEnabled": "true",
                    "iconId": "application",
                    "businessCriticality": "Gold",
                    "vertexType": "group",
                    "groupTokens": [
                        "namespace:acme"
                    ],
                    "correlatable": "true",
                    "name": "acme-template",
                    "entityTypes": [
                        "completeGroup",
                        "namespace"
                    ],
                    "tags": [
                        "acme-template"
                    ]
                }'

              fi






              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # TEMPLATE TELCO
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - CREATE TOPOLOGY TEMPLATES TELCO
              set -x
                  
              echo "Create Custom Topology - Create Template"
              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              # oc create route passthrough topology-manage -n $AIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
              export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})


              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
              echo "    LOGIN: $LOGIN"

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Doptical-networks" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Doptical-networks-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)

              echo "    APP_ID: $APP_ID"
              echo "    TEMPLATE_ID: $TEMPLATE_ID"

              if [[ $TEMPLATE_ID == "" ]];
              then
                echo "  Create Template"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "optical-networks-template",
                    "_correlationEnabled": "true",
                    "iconId": "application",
                    "businessCriticality": "Gold",
                    "vertexType": "group",
                    "groupTokens": [
                        "app:telco"
                    ],
                    "correlatable": "true",
                    "name": "optical-networks-template",
                    "entityTypes": [
                        "completeGroup",
                        "port",
                        "device"
                    ],
                    "tags": [
                        "optical-networks-template"
                    ]
                }'
              else
                echo "  Recreate Template"
                curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$TEMPLATE_ID" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

                
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "optical-networks-template",
                    "_correlationEnabled": "true",
                    "iconId": "application",
                    "businessCriticality": "Gold",
                    "vertexType": "group",
                    "groupTokens": [
                        "app:telco"
                    ],
                    "correlatable": "true",
                    "name": "optical-networks-template",
                    "entityTypes": [
                        "completeGroup",
                        "port",
                        "device"
                    ],
                    "tags": [
                        "optical-networks-template"
                    ]
                }'

              fi







              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # APPLICATION ROBOT SHOP
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - üöÄ CREATE APPLICATION ROBOT SHOP
              set -x

              echo "Create Custom Topology - Add Members to App"


              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)

              export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})

              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
              echo "    LOGIN: $LOGIN"

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Drobot-shop-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Drobot-shop-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export TEMPLATE_NET_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=name%3Dnetwork-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export K8S_OBS_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]| select( .uniqueId == "robot-shop::kubernetes::namespace::robot-shop")|._id'| tail -1)
              #export K8S_OBS_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]| select( .keyIndexName == "robot-shop")|._id'| tail -1)

              echo "    APP_ID:     "$APP_ID
              echo "    TEMPLATE_ID:"$TEMPLATE_ID
              echo "    TEMPLATE_NET_ID:"$TEMPLATE_NET_ID
              echo "    K8S_OBS_ID: "$K8S_OBS_ID

              echo "Create Custom Topology - Create App"

              if [[ $APP_ID == "" ]];
              then    
                echo "  Creating Application"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "robot-shop-app",
                    "_correlationEnabled": "true",
                    "iconId": "application",
                    "businessCriticality": "Platinum",
                    "vertexType": "group",
                    "correlatable": "true",
                    "disruptionCostPerMin": "100",
                    "name": "RobotShop",
                    "entityTypes": [
                        "waiopsApplication"
                    ],
                    "tags": [
                      "app:robotshop",
                      "app:robot-shop"
                    ]
                }'
              else
                echo "  Application already exists"
                echo "  Re-Creating Application"
                curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

                echo "  Creating Application"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "robot-shop-app",
                    "_correlationEnabled": "true",
                    "iconId": "application",
                    "businessCriticality": "Platinum",
                    "vertexType": "group",
                    "correlatable": "true",
                    "disruptionCostPerMin": "100",
                    "name": "RobotShop",
                    "entityTypes": [
                        "waiopsApplication"
                    ],
                    "tags": [
                      "app:robotshop",
                      "app:robot-shop"
                    ]
                }'
              fi

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Drobot-shop-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              echo "    APP_ID:     "$APP_ID

              # # -------------------------------------------------------------------------------------------------------------------------------------------------
              # # CREATE EDGES
              # # -------------------------------------------------------------------------------------------------------------------------------------------------
              if [[ $K8S_OBS_ID == "" ]];
              then  
                echo "    No K8s Observer defined"
              else
                echo "  Add K8s Observer Resources"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d "{
                  \"_id\": \"$K8S_OBS_ID\"
                }"
              fi

              echo "  Add Template (File Observer) Resources"
              curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
              -u $LOGIN \
              -H 'Content-Type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -d "{
                \"_id\": \"$TEMPLATE_ID\"
              }"

              # echo "  Add Template (Network) Resources"
              # curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
              # -u $LOGIN \
              # -H 'Content-Type: application/json' \
              # -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              # -d "{
              #   \"_id\": \"$TEMPLATE_NET_ID\"
              # }"

              # # -------------------------------------------------------------------------------------------------------------------------------------------------
              # # RE-RUN K8s Observer
              # # -------------------------------------------------------------------------------------------------------------------------------------------------

              export AIO_PLATFORM_ROUTE=$(oc get route -n $AIOPS_NAMESPACE aimanager-aio-controller -o jsonpath={.spec.host})

              echo "        Namespace:          $AIOPS_NAMESPACE"
              echo "        AIO_PLATFORM_ROUTE: $AIO_PLATFORM_ROUTE"
              echo ""

              echo "       üõ†Ô∏è   Getting ZEN Token"

              ZEN_API_HOST=$(oc get route -n $AIOPS_NAMESPACE cpd -o jsonpath='{.spec.host}')
              ZEN_LOGIN_URL="https://${ZEN_API_HOST}/v1/preauth/signin"
              LOGIN_USER=admin
              LOGIN_PASSWORD="$(oc get secret admin-user-details -n $AIOPS_NAMESPACE -o jsonpath='{ .data.initial_admin_password }' | base64 --decode)"

              ZEN_LOGIN_RESPONSE=$(
              curl -k \
              -H 'Content-Type: application/json' \
              -XPOST \
              "${ZEN_LOGIN_URL}" \
              -d '{
                  "username": "'"${LOGIN_USER}"'",
                  "password": "'"${LOGIN_PASSWORD}"'"
              }' 2> /dev/null
              )

              ZEN_LOGIN_MESSAGE=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .message)

              if [ "${ZEN_LOGIN_MESSAGE}" != "success" ]; then
                  echo "Login failed: ${ZEN_LOGIN_MESSAGE}"

              fi

              ZEN_TOKEN=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .token)
              # echo "${ZEN_TOKEN}"


              echo "Sucessfully logged in" 
              echo ""
              echo "Running K8S OBSERVER"

              curl -X 'POST' --insecure \
                "https://$AIO_PLATFORM_ROUTE/v1/observer/runjob/demo-robot-shop" \
                -H 'accept: application/json' \
                -H 'Content-Type: application/json' \
                -H "authorization: Bearer $ZEN_TOKEN"  


              # curl -X 'POST' --insecure \
              #   "https://$AIO_PLATFORM_ROUTE/v1/observer/runjob/demo-robot-shop-topology" \
              #   -H 'accept: application/json' \
              #   -H 'Content-Type: application/json' \
              #   -H "authorization: Bearer $ZEN_TOKEN"  \









              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # APPLICATION SOCK SHOP
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - üöÄ CREATE APPLICATION SOCK SHOP
              set -x

              echo "Create Custom Topology - Add Members to App"


              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)

              export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})

              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
              echo "    LOGIN: $LOGIN"

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dsock-shop-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dsock-shop-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export TEMPLATE_NET_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=name%3Dnetwork-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export K8S_OBS_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]| select( .uniqueId == "sock-shop::kubernetes::namespace::sock-shop")|._id'| tail -1)
              #export K8S_OBS_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]| select( .keyIndexName == "sock-shop")|._id'| tail -1)

              echo "    APP_ID:     "$APP_ID
              echo "    TEMPLATE_ID:"$TEMPLATE_ID
              echo "    TEMPLATE_NET_ID:"$TEMPLATE_NET_ID
              echo "    K8S_OBS_ID: "$K8S_OBS_ID

              echo "Create Custom Topology - Create App"

              if [[ $APP_ID == "" ]];
              then    
                echo "  Creating Application"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "sock-shop-app",
                    "_correlationEnabled": "true",
                    "iconId": "swarm",
                    "businessCriticality": "Gold",
                    "vertexType": "group",
                    "correlatable": "true",
                    "disruptionCostPerMin": "50",
                    "name": "SockShop",
                    "entityTypes": [
                        "waiopsApplication"
                    ],
                    "tags": [
                      "app:sockshop",
                      "app:sock-shop"
                    ]
                }'
              else
                echo "  Application already exists"
                echo "  Re-Creating Application"
                curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'

                echo "  Creating Application"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "sock-shop-app",
                    "_correlationEnabled": "true",
                    "iconId": "swarm",
                    "businessCriticality": "Gold",
                    "vertexType": "group",
                    "correlatable": "true",
                    "disruptionCostPerMin": "50",
                    "name": "SockShop",
                    "entityTypes": [
                        "waiopsApplication"
                    ],
                    "tags": [
                      "app:sockshop",
                      "app:sock-shop"
                    ]
                }'
              fi

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dsock-shop-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              echo "    APP_ID:     "$APP_ID

              # # -------------------------------------------------------------------------------------------------------------------------------------------------
              # # CREATE EDGES
              # # -------------------------------------------------------------------------------------------------------------------------------------------------
              if [[ $K8S_OBS_ID == "" ]];
              then  
                echo "    No K8s Observer defined"
              else
                echo "  Add K8s Observer Resources"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d "{
                  \"_id\": \"$K8S_OBS_ID\"
                }"
              fi

              echo "  Add Template (File Observer) Resources"
              curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
              -u $LOGIN \
              -H 'Content-Type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -d "{
                \"_id\": \"$TEMPLATE_ID\"
              }"


              # # -------------------------------------------------------------------------------------------------------------------------------------------------
              # # RE-RUN K8s Observer
              # # -------------------------------------------------------------------------------------------------------------------------------------------------

              export AIO_PLATFORM_ROUTE=$(oc get route -n $AIOPS_NAMESPACE aimanager-aio-controller -o jsonpath={.spec.host})

              echo "        Namespace:          $AIOPS_NAMESPACE"
              echo "        AIO_PLATFORM_ROUTE: $AIO_PLATFORM_ROUTE"
              echo ""

              echo "       üõ†Ô∏è   Getting ZEN Token"

              ZEN_API_HOST=$(oc get route -n $AIOPS_NAMESPACE cpd -o jsonpath='{.spec.host}')
              ZEN_LOGIN_URL="https://${ZEN_API_HOST}/v1/preauth/signin"
              LOGIN_USER=admin
              LOGIN_PASSWORD="$(oc get secret admin-user-details -n $AIOPS_NAMESPACE -o jsonpath='{ .data.initial_admin_password }' | base64 --decode)"

              ZEN_LOGIN_RESPONSE=$(
              curl -k \
              -H 'Content-Type: application/json' \
              -XPOST \
              "${ZEN_LOGIN_URL}" \
              -d '{
                  "username": "'"${LOGIN_USER}"'",
                  "password": "'"${LOGIN_PASSWORD}"'"
              }' 2> /dev/null
              )

              ZEN_LOGIN_MESSAGE=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .message)

              if [ "${ZEN_LOGIN_MESSAGE}" != "success" ]; then
                  echo "Login failed: ${ZEN_LOGIN_MESSAGE}"

              fi

              ZEN_TOKEN=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .token)
              # echo "${ZEN_TOKEN}"


              echo "Sucessfully logged in" 
              echo ""
              echo "Running K8S OBSERVER"

              curl -X 'POST' --insecure \
                "https://$AIO_PLATFORM_ROUTE/v1/observer/runjob/demo-sock-shop" \
                -H 'accept: application/json' \
                -H 'Content-Type: application/json' \
                -H "authorization: Bearer $ZEN_TOKEN"  


              # curl -X 'POST' --insecure \
              #   "https://$AIO_PLATFORM_ROUTE/v1/observer/runjob/demo-sock-shop-topology" \
              #   -H 'accept: application/json' \
              #   -H 'Content-Type: application/json' \
              #   -H "authorization: Bearer $ZEN_TOKEN"  \






              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # APPLICATION ACME AIR
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - üöÄ CREATE APPLICATION ACME
              set -x

              echo "Create Custom Topology - Add Members to App"


              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)

              export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})

              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
              echo "    LOGIN: $LOGIN"

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dacme-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dacme-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export TEMPLATE_NET_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=name%3Dnetwork-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export K8S_OBS_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]| select( .keyIndexName == "acme::kubernetes::namespace::acme")|._id'| tail -1)
              #export K8S_OBS_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]| select( .keyIndexName == "acme")|._id'| tail -1)

              echo "    APP_ID:     "$APP_ID
              echo "    TEMPLATE_ID:"$TEMPLATE_ID
              echo "    TEMPLATE_NET_ID:"$TEMPLATE_NET_ID
              echo "    K8S_OBS_ID: "$K8S_OBS_ID

              echo "Create Custom Topology - Create App"

              if [[ $APP_ID == "" ]];
              then    
                echo "  Creating Application"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "acme-app",
                    "_correlationEnabled": "true",
                    "iconId": "cluster",
                    "businessCriticality": "Silver",
                    "vertexType": "group",
                    "correlatable": "true",
                    "disruptionCostPerMin": "25",
                    "name": "ACME Air",
                    "entityTypes": [
                        "waiopsApplication"
                    ],
                    "tags": [
                      "app:acmeair",
                      "app:acme-air"
                    ]
                }'
              else
                echo "  Application already exists"
                echo "  Re-Creating Application"
                curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'


                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "acme-app",
                    "_correlationEnabled": "true",
                    "iconId": "cluster",
                    "businessCriticality": "Silver",
                    "vertexType": "group",
                    "correlatable": "true",
                    "disruptionCostPerMin": "25",
                    "name": "ACME Air",
                    "entityTypes": [
                        "waiopsApplication"
                    ],
                    "tags": [
                      "app:acmeair",
                      "app:acme-air"
                    ]
                }'

              fi

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Dacme-app" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              echo "    APP_ID:     "$APP_ID

              # # -------------------------------------------------------------------------------------------------------------------------------------------------
              # # CREATE EDGES
              # # -------------------------------------------------------------------------------------------------------------------------------------------------


              echo "  Add Template (File Observer) Resources"
              curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
              -u $LOGIN \
              -H 'Content-Type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -d "{
                \"_id\": \"$TEMPLATE_ID\"
              }"






              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # APPLICATION TELCO
              # --------------------------------------------------------------------------------------------------------------------------------------
              # --------------------------------------------------------------------------------------------------------------------------------------
              # -----------------------------------------------------------------------------------------------------------------------------
              # üöÄ TOPOLOGY - üöÄ CREATE APPLICATION TELCO
              set -x

              echo "Create Custom Topology - Add Members to App"


              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)

              export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})

              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              echo "    URL: $TOPO_MGT_ROUTE/1.0/rest-observer/rest/resources"
              echo "    LOGIN: $LOGIN"

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Doptical-networks" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              export TEMPLATE_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Doptical-networks-template" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              echo "    APP_ID:     "$APP_ID
              echo "    TEMPLATE_ID:"$TEMPLATE_ID
              echo "Create Custom Topology - Create App"

              if [[ $APP_ID == "" ]];
              then    
                echo "  Creating Application"
                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "optical-networks",
                    "_correlationEnabled": "true",
                    "iconId": "cluster",
                    "businessCriticality": "Platinum",
                    "vertexType": "group",
                    "correlatable": "true",
                    "disruptionCostPerMin": "1000",
                    "name": "Optical Networks",
                    "entityTypes": [
                        "waiopsApplication"
                    ],
                    "tags": [
                      "app:optical-networks",
                      "app:telco"
                    ]
                }'
              else
                echo "  Application already exists"
                echo "  Re-Creating Application"
                curl -X "DELETE" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'


                curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups" --insecure \
                -u $LOGIN \
                -H 'Content-Type: application/json' \
                -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
                -d '  {
                    "keyIndexName": "optical-networks",
                    "_correlationEnabled": "true",
                    "iconId": "cluster",
                    "businessCriticality": "Platinum",
                    "vertexType": "group",
                    "correlatable": "true",
                    "disruptionCostPerMin": "1000",
                    "name": "Optical Networks",
                    "entityTypes": [
                        "waiopsApplication"
                    ],
                    "tags": [
                      "app:optical-networks",
                      "app:telco"
                    ]
                }'

              fi

              export APP_ID=$(curl -X "GET" "$TOPO_MGT_ROUTE/1.0/topology/groups?_field=*&_filter=keyIndexName%3Doptical-networks" --insecure -u $LOGIN -H 'Content-Type: application/json' -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255'|jq -r -c '._items[]|._id'| tail -1)
              echo "    APP_ID:     "$APP_ID

              # # -------------------------------------------------------------------------------------------------------------------------------------------------
              # # CREATE EDGES
              # # -------------------------------------------------------------------------------------------------------------------------------------------------

              echo "  Add Template (File Observer) Resources"
              curl -X "POST" "$TOPO_MGT_ROUTE/1.0/topology/groups/$APP_ID/members" --insecure \
              -u $LOGIN \
              -H 'Content-Type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -d "{
                \"_id\": \"$TEMPLATE_ID\"
              }"




              # --------------------------------------------------------------------------------------------------------------------------------------
              # TOPOLOGY - REBROADCAST
              # --------------------------------------------------------------------------------------------------------------------------------------

              echo "REBROADCAST"
              export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')

              export TOPOLOGY_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
              export TOPOLOGY_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
              # oc create route passthrough topology-manage -n $AIOPS_NAMESPACE --service=aiops-topology-topology --port=https-topology-api
              export TOPO_MGT_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-topology -o jsonpath={.spec.host})

          
              export LOGIN="$TOPOLOGY_REST_USR:$TOPOLOGY_REST_PWD"

              echo "    URL: $TOPO_MGT_ROUTE/1.0/topology/metadata"
              echo "    LOGIN: $LOGIN"

              curl -XPOST -k \
              "$TOPO_MGT_ROUTE/1.0/topology/crawlers/rebroadcast" \
              -H 'accept: application/json' \
              -H 'content-type: application/json' \
              -H 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' \
              -u $LOGIN \
                -d '{
                "transactionLength": 1000,
                "includeHistory": true,
                "includeStatus": true,
                "includeEdges": true
              }'






              while true
              do
                sleep 1000
              done


          env:
      restartPolicy: Never
  backoffLimit: 500

